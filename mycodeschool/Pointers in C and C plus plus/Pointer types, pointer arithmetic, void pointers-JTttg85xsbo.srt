0
00:00:00,390 --> 00:00:05,200
Hasta ahora, en nuestras lecciones 
anteriores hemos visto cómo trabajar con 
variables de puntero.

1
00:00:05,200 --> 00:00:10,190
Por lo que entendemos más o menos lo básico, 
en

2
00:00:10,190 --> 00:00:11,580
esta lección vamos a escribir algo de código 
más el

3
00:00:11,580 --> 00:00:14,630
uso de punteros y vamos a mirar a través de

4
00:00:14,630 --> 00:00:19,480
algunos de estos conceptos con más detalle 
mediante algunos ejemplos. Lo primero que 
quiero señalar es que

5
00:00:19,480 --> 00:00:22,160
las variables de puntero son fuertemente 
tipados.

6
00:00:22,160 --> 00:00:27,039
Lo que significa es que se necesita una 
variable de puntero de

7
00:00:27,039 --> 00:00:30,800
un tipo particular para almacenar la 
dirección del tipo particular de la variable.

8
00:00:30,800 --> 00:00:35,020
Se necesitará por lo int * o un puntero a 
entero para

9
00:00:35,020 --> 00:00:38,770
almacenar la dirección de un número entero, 
se necesitará puntero del carácter

10
00:00:38,770 --> 00:00:42,070
para almacenar la dirección de un personaje 
y de manera similar si

11
00:00:42,070 --> 00:00:45,530
tenemos una estructura o clase definida por 
el usuario entonces necesitamos un

12
00:00:45,530 --> 00:00:48,829
puntero de ese particular, Sólo el tipo, 
pero ¿por qué necesitamos estos tipos 
fuertes.

13
00:00:48,829 --> 00:00:53,199
¿No es que las variables de puntero 
simplemente almacenar la dirección de la 
variable.

14
00:00:53,199 --> 00:00:55,250
Así que ¿por qué no tenemos un solo tipo que

15
00:00:55,250 --> 00:00:58,969
va a haber algún tipo genérico para 
almacenar la dirección

16
00:00:58,969 --> 00:01:04,180
de todo tipo de variables y la respuesta es 
que

17
00:01:04,180 --> 00:01:07,630
no utilizamos las variables de puntero sólo 
para almacenar direcciones

18
00:01:07,630 --> 00:01:11,560
de memoria, pero también utilizamos ellos 
para eliminar la referencia

19
00:01:11,560 --> 00:01:15,390
de estos direcciones para que puedan acceder 
y modificar los valores de estas direcciones.

20
00:01:15,390 --> 00:01:19,229
Ahora, como usted saber los tipos de datos 
tienen

21
00:01:19,229 --> 00:01:22,470
diferentes tamaños, como en un típico 
compilador día moderno

22
00:01:22,470 --> 00:01:26,360
un número entero se almacena en cuatro 
bytes, una

23
00:01:26,360 --> 00:01:30,079
variable de carácter se almacena en un byte, 
una

24
00:01:30,079 --> 00:01:34,850
variable flotador se almacena en cuatro 
bytes y estas

25
00:01:34,850 --> 00:01:38,400
variables difieren no sólo en sus tamaños 
también difieren

26
00:01:38,400 --> 00:01:42,920
en la forma en que almacenamos la 
información en

27
00:01:42,920 --> 00:01:43,380
cualquier bytes están disponibles para estas 
variables o tipos de datos.

28
00:01:43,380 --> 00:01:46,570
Digamos que tenemos un número entero A y

29
00:01:46,570 --> 00:01:49,630
su valor es de 1025 y esta es

30
00:01:49,630 --> 00:01:54,490
la forma en que se presenta en la memoria. 
Cada soporte aquí es un byte.

31
00:01:54,490 --> 00:01:58,740
Digamos que este byte particular que

32
00:01:58,740 --> 00:02:01,759
es el byte menos significativo es

33
00:02:01,759 --> 00:02:05,219
el byte 0 y luego seguimos

34
00:02:05,219 --> 00:02:08,629
así byte un byte dos y tres bytes. Ahora 
también sabemos que cada

35
00:02:08,629 --> 00:02:12,209
byte en la memoria es direccionable. Digamos 
que la dirección

36
00:02:12,209 --> 00:02:16,989
del byte cero es 200. Ahora bien, estos 
cuatro bytes tienen que ser contiguos. 
Digamos que la dirección del

37
00:02:16,989 --> 00:02:20,950
byte 1 es de 201

38
00:02:20,950 --> 00:02:24,040
y luego seguimos así 202 y 203. Cuando un 
número entero está representado en la

39
00:02:24,040 --> 00:02:27,550
memoria, se almacena en la memoria de los

40
00:02:27,550 --> 00:02:31,140
que dejan la mayoría de las tiendas de

41
00:02:31,140 --> 00:02:34,910
bits de información que el número entero si

42
00:02:34,910 --> 00:02:35,330
esta es positiva o negativa por lo que

43
00:02:35,330 --> 00:02:38,840
también se denomina bit de signo y descanso

44
00:02:38,840 --> 00:02:43,900
31 bits se utilizan para almacenar el valor. 
Así que si ves que tenemos un uno a

45
00:02:43,900 --> 00:02:46,920
la derecha más bits con el valor de posición

46
00:02:46,920 --> 00:02:50,900
2 a la potencia cero y en este fragmento

47
00:02:50,900 --> 00:02:54,170
con el valor de posición 2 a la potencia 10.

48
00:02:54,170 --> 00:02:57,379
Por lo que el valor total que

49
00:02:57,379 --> 00:03:01,830
tenemos aquí en binario es 1025 en decimal. 
Ahora lo que si me declaro un puntero

50
00:03:01,830 --> 00:03:05,650
a un entero P y almacenar la dirección

51
00:03:05,650 --> 00:03:09,830
de A en P mediante el operador Y comercial.

52
00:03:09,830 --> 00:03:12,849
¿Qué pasará si imprimo el valor de P?

53
00:03:12,849 --> 00:03:16,310
El valor de P o la dirección almacenada

54
00:03:16,310 --> 00:03:21,400
en P será 200 la dirección del byte 0. Así 
que estamos tipo de decir que tenemos la 
dirección

55
00:03:21,400 --> 00:03:25,560
de partida de una variable entera en la 
dirección 200.

56
00:03:25,560 --> 00:03:28,620
Si nos eliminar la referencia de esta 
dirección y tratar de

57
00:03:28,620 --> 00:03:32,459
imprimir * P queremos conocer el valor en 
esta dirección en particular.

58
00:03:32,459 --> 00:03:35,650
A continuación, la máquina ve que P es un 
puntero

59
00:03:35,650 --> 00:03:39,409
a un entero así que tenemos que mirar a 
cuatro

60
00:03:39,409 --> 00:03:43,209
bytes que comienzan dirección 200 y luego la 
máquina sabe

61
00:03:43,209 --> 00:03:46,950
cómo extraer el valor de un tipo de datos 
entero. Por lo tanto,

62
00:03:46,950 --> 00:03:49,959
recupera el valor

63
00:03:49,959 --> 00:03:53,360
de 1,025 de

64
00:03:53,360 --> 00:03:56,860
estos cuatro bytes. Ahora bien, si P es un 
puntero de

65
00:03:56,860 --> 00:04:00,209
caracteres a continuación, mientras que la 
máquina de

66
00:04:00,209 --> 00:04:01,780
eliminación de referencias se habría visto 
en un

67
00:04:01,780 --> 00:04:05,019
solo byte, porque una variable de carácter 
sólo es un byte. Si P es un puntero a flotar 
a continuación, a

68
00:04:05,019 --> 00:04:09,489
pesar de flotación también se almacena en 
cuatro bytes, aunque

69
00:04:09,489 --> 00:04:13,200
la información forma en que se ha escrito 
para el

70
00:04:13,200 --> 00:04:16,540
flotador en estos cuatro bytes es diferente 
de la forma

71
00:04:16,540 --> 00:04:20,540
en que la información se escribe para un 
tipo de datos entero. Por lo que el valor 
impreso hubiera sido otra cosa.

72
00:04:20,540 --> 00:04:24,350
Vamos a escribir algo de esto en un programa 
real y ver lo que sucede.

73
00:04:24,350 --> 00:04:27,759
En mi programa de C Voy a declarar en

74
00:04:27,759 --> 00:04:32,600
primer lugar un número entero 'a' igual a 
1025

75
00:04:32,600 --> 00:04:35,930
y ahora voy a declarar un puntero a un

76
00:04:35,930 --> 00:04:39,009
entero 'p' y luego voy a almacenar la 
dirección

77
00:04:39,009 --> 00:04:42,900
de la 'a' en 'p' usando el operador de 
signo. Ahora voy a escribir una declaración 
de impresión

78
00:04:42,900 --> 00:04:45,979
como este tamaño de número entero es y

79
00:04:45,979 --> 00:04:49,810
tenemos una función sizeof en C que nos

80
00:04:49,810 --> 00:04:53,440
da el tamaño de un tipo de datos

81
00:04:53,440 --> 00:04:57,660
particular, en bytes, y ahora voy a escribir

82
00:04:57,660 --> 00:05:00,910
una declaración de impresión de este tipo, la

83
00:05:00,910 --> 00:05:04,300
dirección es igual a 'p 'y el valor es igual 
a' * p '. Nos dereference 'p'

84
00:05:04,300 --> 00:05:07,900
para imprimir el valor. Ahora vamos a ver lo 
que es la salida de este

85
00:05:07,900 --> 00:05:11,720
programa no hay puntos por adivinar esto es 
bastante sencillo el

86
00:05:11,720 --> 00:05:15,590
tamaño del número entero de 4 bytes de la 
dirección que

87
00:05:15,590 --> 00:05:18,930
estamos mostrando aquí tienes la dirección y 
el valor es de 1025.

88
00:05:18,930 --> 00:05:24,090
OK Ahora voy a hacer un poco de truco aquí 
voy a

89
00:05:24,090 --> 00:05:26,509
declarar un puntero de carácter digamos el 
nombre de la variable es 'p0'.

90
00:05:26,509 --> 00:05:29,910
Ahora voy a tratar de poner la misma 
dirección que

91
00:05:29,910 --> 00:05:34,210
tenemos en 'p' en 'p0' escribiendo una 
declaración así, pero

92
00:05:34,210 --> 00:05:38,070
esto nos dará un error de compilación porque 
'p0' es

93
00:05:38,070 --> 00:05:40,919
un puntero a carácter y 'p' es un puntero a 
un entero.

94
00:05:40,919 --> 00:05:44,600
Entonces, ¿qué vamos a hacer aquí es 
encasillado 'p'

95
00:05:44,600 --> 00:05:47,669
al puntero del personaje y luego asignar el 
valor

96
00:05:47,669 --> 00:05:52,169
y ahora va a escribir dos más sentencias de 
impresión.

97
00:05:52,169 --> 00:05:56,940
En primer lugar es el "tamaño de carácter es 
estos muchos bytes"

98
00:05:56,940 --> 00:06:00,350
y usamos un método sizeof de nuevo y la 
segunda es la

99
00:06:00,350 --> 00:06:04,919
dirección es "P0" y el valor en la dirección 
es '* P0'

100
00:06:04,919 --> 00:06:06,910
por lo que eliminar la referencia de que 
tratamos de eliminar la

101
00:06:06,910 --> 00:06:11,580
referencia 'p0' ahora y veamos lo que es 
ahora la salida de

102
00:06:11,580 --> 00:06:12,910
la primera línea de salida es el tamaño del 
número entero de

103
00:06:12,910 --> 00:06:16,289
4 bytes de dirección, porque nos estamos 
quedando el programa fresca esta

104
00:06:16,289 --> 00:06:19,650
dirección no será la dirección anterior, la 
dirección de la ejecución anterior.

105
00:06:19,650 --> 00:06:23,490
Esta será una dirección diferente 
desreferenciando el puntero

106
00:06:23,490 --> 00:06:25,240
número entero que estamos recibiendo el 
valor 1025.

107
00:06:25,240 --> 00:06:28,830
Ahora, la siguiente línea de salida es el 
tamaño

108
00:06:28,830 --> 00:06:32,990
de carácter es una dirección de bytes es 
5373032,

109
00:06:32,990 --> 00:06:35,990
que es la misma dirección que tenemos en la

110
00:06:35,990 --> 00:06:40,069
segunda línea, pero el valor de este tiempo 
es 1. Ahora ¿por qué es este valor 1, una vez

111
00:06:40,069 --> 00:06:44,770
más, si escribimos 1025 en binario usando 32 
bits

112
00:06:44,770 --> 00:06:48,400
entonces esto va a ser la representación 
cuando hacemos

113
00:06:48,400 --> 00:06:51,970
este tipo de colada aquí tratando de 
almacenar la

114
00:06:51,970 --> 00:06:55,199
dirección de 'p' en 'p0', entonces la 
dirección de

115
00:06:55,199 --> 00:06:58,310
este particular, byte del byte de la derecha 
se almacena en 'p0'.

116
00:06:58,310 --> 00:07:02,810
Pero cuando desreferenciar 'p0' porque 'p0' 
es un puntero al carácter

117
00:07:02,810 --> 00:07:05,280
de las máquinas decir que bueno esto es un 
puntero a

118
00:07:05,280 --> 00:07:10,460
un carácter y el carácter es solamente un 
byte por lo

119
00:07:10,460 --> 00:07:14,009
que se verá en un solo byte para ver el valor

120
00:07:14,009 --> 00:07:17,030
y si ves este byte en particular en el 
sistema binario

121
00:07:17,030 --> 00:07:21,930
es 1 y es por eso que esta salida aquí es 
uno. OK, voy a escribir dos más sentencias 
de impresión ahora uno para imprimir la

122
00:07:21,930 --> 00:07:27,139
dirección de p más uno y el valor en la 
dirección P más uno.

123
00:07:27,139 --> 00:07:30,389
Ahora ya sabemos que podemos sumar o restar 
una

124
00:07:30,389 --> 00:07:34,270
constante a partir de una variable de 
puntero entero.

125
00:07:34,270 --> 00:07:38,300
Esto está permitido, de hecho, la única 
aritmética

126
00:07:38,300 --> 00:07:41,449
de punteros que se permite es la adición

127
00:07:41,449 --> 00:07:46,330
o sustracción de un valor constante entera 
al puntero. p + 1 nos llevará a la dirección 
del siguiente número entero,

128
00:07:46,330 --> 00:07:50,379
por lo que se saltará cuatro bytes y 
llevarnos cuatro bytes por delante.

129
00:07:50,379 --> 00:07:53,889
Digamos también queremos imprimir p0 más uno

130
00:07:53,889 --> 00:07:55,190
y el valor en P0 más uno.

131
00:07:55,190 --> 00:07:58,310
Bueno, ahora vamos a ver el resultado de 
este programa en

132
00:07:58,310 --> 00:08:01,990
particular la dirección de la 'a' esta vez 
es 4456036 eso

133
00:08:01,990 --> 00:08:06,000
es lo que se asigna para "a" en esta carrera 
en particular.

134
00:08:06,000 --> 00:08:12,470
El valor es de 1025 p 445 más uno es 6040, 
si usted ve

135
00:08:12,470 --> 00:08:13,479
esto es de 4 bytes más que la dirección de 
la "a", porque el

136
00:08:13,479 --> 00:08:18,690
tamaño del número entero de 4 bytes y 'P' es 
un puntero a un entero.

137
00:08:18,690 --> 00:08:22,090
Por lo tanto incrementando 'P' nos lleva 
cuatro bytes

138
00:08:22,090 --> 00:08:26,319
adelante y este valor es un valor de la

139
00:08:26,319 --> 00:08:29,889
basura, porque no hemos llenado nada en esta 
dirección

140
00:08:29,889 --> 00:08:30,590
en particular por lo que hay un poco de

141
00:08:30,590 --> 00:08:36,399
basura en la memoria de la que estamos 
recogiendo. Ahora abordar en 'p0' es también 
4.456.036 que

142
00:08:36,399 --> 00:08:40,019
es la dirección del primer byte del byte

143
00:08:40,019 --> 00:08:43,190
menos significativo de la "a" el valor es 1.

144
00:08:43,190 --> 00:08:47,620
Ahora p0 más uno es 4.456.037 aquí tenemos

145
00:08:47,620 --> 00:08:51,140
un valor que es un byte más y

146
00:08:51,140 --> 00:08:54,410
esto es porque el personaje se almacena en 
uno bytes. Ahora el valor aquí es de cuatro, 
si

147
00:08:54,410 --> 00:08:57,690
ves p0 más uno nos llevará a este

148
00:08:57,690 --> 00:09:02,580
byte particular, la dirección de este byte 
particular

149
00:09:02,580 --> 00:09:04,970
y este byte en particular en binario es 4.

150
00:09:04,970 --> 00:09:07,820
Esto fue para mostrar cómo ocurren las cosas 
en la

151
00:09:07,820 --> 00:09:11,090
memoria cuando eliminar la referencia de una 
variable puntero usando

152
00:09:11,090 --> 00:09:14,240
el operador asterisco y también lo que 
sucede cuando llevamos

153
00:09:14,240 --> 00:09:17,380
a cabo la aritmética de punteros con un tipo 
de puntero en particular.

154
00:09:17,380 --> 00:09:20,780
Este tipo de fundición de variable de 
puntero de

155
00:09:20,780 --> 00:09:24,810
uno a otro también tiene algunos casos de 
uso. Vamos a discutir más adelante.

156
00:09:24,810 --> 00:09:29,400
Ahora vamos a hablar de un tipo de puntero 
genérico que es un tipo de puntero.

157
00:09:29,400 --> 00:09:33,950
Que no se corresponde con un tipo de datos

158
00:09:33,950 --> 00:09:34,560
particular y este tipo de puntero se llama 
puntero

159
00:09:34,560 --> 00:09:37,840
nulo y declarar este tipo de puntero en 
particular

160
00:09:37,840 --> 00:09:41,910
mediante el uso de la palabra clave vacío y

161
00:09:41,910 --> 00:09:45,940
el uso de un signo asterisco delante del 
nombre de la variable. De nuevo ahora 
podemos escribir algo como 'p0'

162
00:09:45,940 --> 00:09:51,090
es igual a 'p' que no necesitamos un

163
00:09:51,090 --> 00:09:55,760
tipo de conversión explícita aquí de esta 
manera. La declaración 'p0' es igual a 'p' 
es válido

164
00:09:55,760 --> 00:09:59,930
y esto no le dará error de compilación y

165
00:09:59,930 --> 00:10:00,710
porque este tipo de puntero en particular no 
se

166
00:10:00,710 --> 00:10:03,790
asigna a un tipo de datos particular, no 
podemos

167
00:10:03,790 --> 00:10:08,130
eliminar la referencia de esta variable 
puntero en particular. Así que si

168
00:10:08,130 --> 00:10:08,770
intenta imprimir estrella

169
00:10:08,770 --> 00:10:11,870
'p0' o 'p0'

170
00:10:11,870 --> 00:10:16,020
asterisco esto le Estamos recibiendo un 
error de compilación.

171
00:10:16,020 --> 00:10:21,470
sólo podemos imprimir la dirección y como 
podemos ver aquí

172
00:10:21,470 --> 00:10:22,230
la dirección es la misma que la dirección de 
la

173
00:10:22,230 --> 00:10:26,590
'a' y si realizamos la aritmética si 
tratamos de hacer

174
00:10:26,590 --> 00:10:30,500
algo como p0 más un acceso algo así como p0

175
00:10:30,500 --> 00:10:33,560
más uno esto también no es posible este 
también le dará error de compilación.

176
00:10:33,560 --> 00:10:37,810
Vamos a volver a los casos de

177
00:10:37,810 --> 00:10:42,080
uso de punteros void en las próximas 
lecciones. Vamos por ahora saben que hay

178
00:10:42,080 --> 00:10:46,740
algo que se llama punteros void. Así que 
este era el buceo profundo

179
00:10:46,740 --> 00:10:49,760
en los tipos de puntero, la conversión

180
00:10:49,760 --> 00:10:53,640
de tipos y la aritmética de punteros. Vamos 
a tener un montón de

181
00:10:53,640 --> 00:10:54,230
diversión con punteros en las próximas 
lecciones.

182
00:10:54,230 --> 00:10:55,710
Así que gracias por ver.

