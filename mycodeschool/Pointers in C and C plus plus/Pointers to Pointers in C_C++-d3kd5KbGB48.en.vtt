WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:08.170
In our lesson so far we have seen how we can
work with pointers in some of the basic scenarios

00:00:08.170 --> 00:00:13.880
but there are some scenarios where pointers
can be really puzzling and one such scenario

00:00:13.880 --> 00:00:20.830
is when we want to use pointers to pointers.
In this lesson we are going to see how we

00:00:20.830 --> 00:00:27.130
can use a pointer to pointer. Let us assume
that this is a logical view of computer's

00:00:27.130 --> 00:00:32.879
memory and each partition here is one byte of
memory. Now we know that each byte of memory

00:00:32.879 --> 00:00:38.769
has an address. We have drawn the memory horizontally
here. Let us assume that the address increases

00:00:38.769 --> 00:00:44.440
as we go from left to right. So if this byte
is at address 200, the next byte would be

00:00:44.440 --> 00:00:52.489
at address 201 and the next byte would be at
address 202 and so on. Now let's say in my program

00:00:52.489 --> 00:01:02.969
I have declared an integer variable named
X and maybe I have initialized it as 5. Now

00:01:02.969 --> 00:01:07.509
when the program will run, some amount of
memory will be allocated for this variable

00:01:07.509 --> 00:01:14.780
x. In a typical architecture in a typical
compiler, integer is stored in 4 bytes, so

00:01:14.780 --> 00:01:22.619
4 byte will be allocated for x. So, Let's say
these 4 bytes at address 225, this block of

00:01:22.619 --> 00:01:29.509
4 bytes, starting address 225 is allocated
for x and the values stored in this block of

00:01:29.509 --> 00:01:37.189
4 bytes for x is 5. Now the next thing that
I want to do is I want to declare a pointer

00:01:37.189 --> 00:01:42.759
variable that will store the address of x.
now to store the address of an integer we

00:01:42.759 --> 00:01:48.420
will have to declare a pointer to integer
something like this we need to put an asterisk sign

00:01:48.420 --> 00:01:53.799
in front of the variable name. Now what will
happen is that some amount of memory will

00:01:53.799 --> 00:01:59.539
be reserved for this variable p in a typical
architecture. Pointer is also stored in 4

00:01:59.539 --> 00:02:07.229
bytes. So let's say we get this block of 4
bytes at address 215 for p and now I want to

00:02:07.229 --> 00:02:14.080
write a statement like this. So I want to fill
in the address of x in p and that's how p points

00:02:14.080 --> 00:02:21.840
to x. The & operator gives us the address of a
variable. One important thing here. We

00:02:21.840 --> 00:02:29.010
are able to store the address of x in p because
p is of type pointer to integer. If p was

00:02:29.010 --> 00:02:34.689
of type pointer to character or pointer to
some other some other variable, this statement

00:02:34.689 --> 00:02:41.250
p=&x would not have been valid. So if I have
to write down the types of these two variables,

00:02:41.250 --> 00:02:49.980
then x is an integer and p is pointer to integer
or I can also say that p is int * or int

00:02:49.980 --> 00:02:56.450
asterisk. Why pointer variables are strongly
typed? Why do we need a pointer to integer

00:02:56.450 --> 00:03:02.890
to reference or store the address of an integer?
It is because we don't just store the address

00:03:02.890 --> 00:03:10.430
of a variable in a pointer variable. We also
use the pointer variable to dereference the

00:03:10.430 --> 00:03:15.709
address and write some value there. So if I
write a statement like this. This value here

00:03:15.709 --> 00:03:23.780
at address 225. This x is now modified. 
Can I create a pointer to this variable p,

00:03:23.780 --> 00:03:28.819
which itself is a pointer to integer?
Yes, we actually can do so. So let's say

00:03:28.819 --> 00:03:34.870
we want to create a variable named q, that
will store the address of p. Now what will

00:03:34.870 --> 00:03:40.870
be the type of this variable. We need a pointer
of a particular type to store the address

00:03:40.870 --> 00:03:46.569
of a particular type of variable. So to store
a pointer to integer we will have to say

00:03:46.569 --> 00:03:54.140
that we want a pointer to pointer. So we will
put two ** sign in front of a variable name

00:03:54.140 --> 00:04:03.769
and now this variable q can store the address
of p. So with this first line with this int

00:04:03.769 --> 00:04:12.049
**q we created q. Let's say we created q at
205 and now we are saying that q will store

00:04:12.049 --> 00:04:25.450
the address of p so q points to p and the type
of q is int **. We put two *. Simple way to

00:04:25.450 --> 00:04:30.860
read this is that the type of variable x is
integer so to store the address of x we will

00:04:30.860 --> 00:04:38.740
need a pointer of type int * so we will put
a star to say that this is a pointer to that

00:04:38.740 --> 00:04:44.780
particular type and to store the address of
p we will need a pointer to int *. So we will

00:04:44.780 --> 00:04:51.170
put one extra asterisk to say that this is a pointer
to int * and we can go on like this. Lets

00:04:51.170 --> 00:04:57.100
say we want to declare a pointer to pointer
to pointer. So int ** is pointer to pointer

00:04:57.100 --> 00:05:03.780
and we will put one more asterisk we can put these
three asterisks immediately after this key word int

00:05:03.780 --> 00:05:09.220
or we can put it immediately before the variable
name like we have done in the case of q here.

00:05:09.220 --> 00:05:16.670
Let's say we define r as int *** so let's say
r gets this address 230 in the memory. Now

00:05:16.670 --> 00:05:27.800
r is of type int *** so it can store the address
of int ** so it cannot store the address of

00:05:27.800 --> 00:05:38.050
x or p. The statement something like r =&q
will be valid now I have translated my previous

00:05:38.050 --> 00:05:44.880
rough code into a working c program. Let's
assume that this program is working as

00:05:44.880 --> 00:05:51.280
per this memory sketch that we are showing in
the right. Now I will write some print statements

00:05:51.280 --> 00:05:57.000
and you need to guess the outputs. So basically
you have to assume that these variables x,

00:05:57.000 --> 00:06:03.950
p, q, and r are allocated in these addresses what
we are showing here in the right. So the first

00:06:03.950 --> 00:06:11.260
print statement that I am going to write is this.
I want to print *p and this one should be simple

00:06:11.260 --> 00:06:18.710
for you. *p would be value stored at address
in p so this will be 6. Now the next statement

00:06:18.710 --> 00:06:26.660
that I want to print is *q. So *q will be a
value at address stored in q. Address stored

00:06:26.660 --> 00:06:36.030
in variable q is 215 so this is nothing but
the value of p so this will be 225. And now I

00:06:36.030 --> 00:06:44.910
want to print **q. So I want to do dereferencing
twice. First I want to go to *q. *q is this

00:06:44.910 --> 00:06:53.800
address 225. And now I want to look at the value
at address 225. So this one will be 6. We could

00:06:53.800 --> 00:07:01.400
have avoided writing this parentheses here.
We could have said **q only and that would have

00:07:01.400 --> 00:07:07.390
meant the same but it's
a good practice if we are using this asterisk

00:07:07.390 --> 00:07:14.070
operator to use parentheses wherever we can
do it because some times when we are also using

00:07:14.070 --> 00:07:23.020
other operators we are not sure about the
precedence and we want to avoid unwanted behaviors.

00:07:23.020 --> 00:07:31.540
Now what about these two print statements.
**r and ***r, *r means value in q which will

00:07:31.540 --> 00:07:40.020
be 215 and then further one more dereferencing
will take us to value in p which is 225. And one

00:07:40.020 --> 00:07:45.530
more dereferencing will take us to value in
x which will be 6. If you see this is really

00:07:45.530 --> 00:07:52.940
interesting. From r we are using one asterisk operator
and we are able to go to q then we are using

00:07:52.940 --> 00:07:59.540
the asterisk operator twice and we reach p and then we
are using the asterisk operator thrice and we reach x.

00:07:59.540 --> 00:08:05.780
Let's make some more changes in this code and run
this in a real compiler. So what I'll do here

00:08:05.780 --> 00:08:14.220
is I'll write a statement like this and then
after this statement I'll print the value

00:08:14.220 --> 00:08:25.350
in x. If you run this now as you can see *p,
**q and ***r all these 3 values are 6 the address

00:08:25.350 --> 00:08:32.479
will not be same as we had shown in the example
for obvious reasons and as you can see we are

00:08:32.479 --> 00:08:40.779
able to modify x by doing this chain of de
referencing using this variable r. If we would

00:08:40.779 --> 00:08:53.240
write something like **q = let's say something
like this. Now *p is also referencing x and **q

00:08:53.240 --> 00:08:59.939
is also dereferencing x. Sorry, we are dereferencing
here. So any guesses what will be the output

00:08:59.939 --> 00:09:06.800
of this last print statement? Well if you see,
x is incremented by 2 here so this was pointer

00:09:06.800 --> 00:09:13.220
to pointer. I recommend that you write some
of this code yourself and play a little bit.

00:09:13.220 --> 00:09:18.779
In the coming lessons we will use pointer
to pointer in some real problem scenarios.

00:09:18.779 --> 00:09:19.680
Thanks for watching

