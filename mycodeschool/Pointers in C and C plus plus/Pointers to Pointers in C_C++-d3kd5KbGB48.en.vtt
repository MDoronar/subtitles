WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:08.170
In our lesson so far we have seen how we can
work with pointers in some of the basic scenarios

00:00:08.170 --> 00:00:13.880
but there are some scenarios where pointers
can be really puzzling &amp; one such scenario

00:00:13.880 --> 00:00:20.830
is when we want to use pointers to pointers.
In this lesson we are going to see how we

00:00:20.830 --> 00:00:27.130
can use a pointer to pointer Let us assume
that this is a logical view of computer's

00:00:27.130 --> 00:00:32.879
memory &amp; each partition here is one byte of
memory now we know that each byte of memory

00:00:32.879 --> 00:00:38.769
has an address, we have drawn the memory horizontally
here, let us assume that the address increases

00:00:38.769 --> 00:00:44.440
as we go from left to right. So if this byte
is at address 200, the next byte would be

00:00:44.440 --> 00:00:52.489
at address 201 &amp; the next byte would be at
address 202 &amp; so on Now lets say in my programme

00:00:52.489 --> 00:01:02.969
I have declared an integer variable named
X &amp; maybe I have initialized it as 5. now

00:01:02.969 --> 00:01:07.509
when the programme will run, some amount of
memory will be allocated for this variable

00:01:07.509 --> 00:01:14.780
x. in a typical architecture in a typical
compiler, integer is stored in 4 bytes, so

00:01:14.780 --> 00:01:22.619
4 byte will be allocated for x. so, Lets say
these 4 bytes at address 225, this block of

00:01:22.619 --> 00:01:29.509
4 bytes, starting address 225 is allocated
for x &amp; the values stored in this block of

00:01:29.509 --> 00:01:37.189
4 bytes for x is 5. now the next thing that
I want to do is I want to declare a pointer

00:01:37.189 --> 00:01:42.759
variable that will store the address of x.
now to store the address of an integer we

00:01:42.759 --> 00:01:48.420
will have to declare a pointer to integer
something like this we need to put an asterisk sign

00:01:48.420 --> 00:01:53.799
in front of the variable name. now what will
happen is that some amount of memory will

00:01:53.799 --> 00:01:59.539
be reserved for this variable p in a typical
architecture. Pointer is also stored in 4

00:01:59.539 --> 00:02:07.229
bytes so let's say we get this block of 4
bytes at address 215 for p &amp; now I want to

00:02:07.229 --> 00:02:14.080
write a statement like this so I want to fill
in the address of x in p &amp; that's how p points

00:02:14.080 --> 00:02:21.840
to x &amp; operator gives us the address of a
variable now one important thing here, we

00:02:21.840 --> 00:02:29.010
are able to store the address of x in p because
p is of type pointer to integer. If p was

00:02:29.010 --> 00:02:34.689
of type pointer to character or pointer to
some other some other variable, this statement

00:02:34.689 --> 00:02:41.250
p=&amp;x would not have been valid. so if I have
to write down the types of these two variables,

00:02:41.250 --> 00:02:49.980
then x is an integer &amp; p is pointer to integer
or I can also say that p is int star or int

00:02:49.980 --> 00:02:56.450
asterisk &amp; why pointer variables are strongly
typed why do we need a pointer to integer

00:02:56.450 --> 00:03:02.890
to reference or store the address of an integer
it is because we don't just store the address

00:03:02.890 --> 00:03:10.430
of a variable in a pointer variable we also
use the pointer variable to dereference the

00:03:10.430 --> 00:03:15.709
address &amp; write some value there. So if I
write a statement like this, this value here

00:03:15.709 --> 00:03:23.780
at address 225, this x is now modified. now
can I create a pointer to this variable p,

00:03:23.780 --> 00:03:28.819
which itself is a pointer to integer Well
yes we actually we can do so so let's say

00:03:28.819 --> 00:03:34.870
we want to create a variable named q, that
will store the address of p now what will

00:03:34.870 --> 00:03:40.870
be the type of this variable we need a pointer
of a particular type to store the address

00:03:40.870 --> 00:03:46.569
of a particular type of variable, so to store
a pointer to integer, we will have to say

00:03:46.569 --> 00:03:54.140
that we want a pointer to pointer. So we will
put two ** sign in front of a variable name

00:03:54.140 --> 00:04:03.769
&amp; now this variable q can store the address
of p so with this first line with this int

00:04:03.769 --> 00:04:12.049
**q we created q. lets say we created q at
205 &amp; now we are saying that q will store

00:04:12.049 --> 00:04:25.450
the address of p so q points to p &amp; the type
of q is int **. We put two *. Simple way to

00:04:25.450 --> 00:04:30.860
read this is that the type of variable x is
integer so to store the address of x we will

00:04:30.860 --> 00:04:38.740
need a pointer of type int * so we will put
a star to say that this is a pointer to that

00:04:38.740 --> 00:04:44.780
particular type &amp; to store the address of
p we will need a pointer to int * so we will

00:04:44.780 --> 00:04:51.170
put one extra asterisk to say that this is a pointer
to int star &amp; we can go on like this lets

00:04:51.170 --> 00:04:57.100
say we want to declare a pointer to pointer
to pointer so int ** is pointer to pointer

00:04:57.100 --> 00:05:03.780
&amp; we will put one more asterisk we can put these
three asterisks immediately after this key word int

00:05:03.780 --> 00:05:09.220
or we can put it immediately before the variable
name like we have done in the case of q here

00:05:09.220 --> 00:05:16.670
let's say we define r as int *** so lets say
r gets this address 230 in the memory now

00:05:16.670 --> 00:05:27.800
r is of type int *** so it can store the address
of int ** so it cannot store the address of

00:05:27.800 --> 00:05:38.050
x or p the statement something like r =&amp;q
will be valid now I have translated my previous

00:05:38.050 --> 00:05:44.880
rough code into a working c program. Let
us assume that this program is working as

00:05:44.880 --> 00:05:51.280
per this memory sketch that we r showing in
the right now I will write some print statements

00:05:51.280 --> 00:05:57.000
and you need to guess the out puts. So basically
you have to assume that these variables x

00:05:57.000 --> 00:06:03.950
p q &amp; r are allocated these addresses what
we r showing here in the right so the first

00:06:03.950 --> 00:06:11.260
print statement that I am going to write is
I want to print *p &amp; this one should be simple

00:06:11.260 --> 00:06:18.710
for you *p would be value stored at address
in p so this will be 6 now the next statement

00:06:18.710 --> 00:06:26.660
that I want to print is *q so *q will be a
value at address stored in q address stored

00:06:26.660 --> 00:06:36.030
in variable q is 215 so this is nothing but
the value of p so this will be 225 &amp; now I

00:06:36.030 --> 00:06:44.910
want to print **q so I want to do de referencing
twice first I want to go to *q, *q is this

00:06:44.910 --> 00:06:53.800
address 225 &amp; now I want to look at the value
at address 225 so this one will be 6 we could

00:06:53.800 --> 00:07:01.400
have avoided writing this parentheses here,
we could have said **q only &amp; that would have

00:07:01.400 --> 00:07:07.390
also that would have meant the same but it's
a good practice if we are using this asterisk

00:07:07.390 --> 00:07:14.070
operator to use parentheses wherever we can
do it because some times when we r also using

00:07:14.070 --> 00:07:23.020
other operators we are not sure about the
precedence &amp; we want to avoid unwanted behaviors

00:07:23.020 --> 00:07:31.540
now what about these two print statements
**r &amp; ***r, *r means value in q which will

00:07:31.540 --> 00:07:40.020
be 215 &amp; then further one more dereferencing
will take us to value in p which is 225 &amp; one

00:07:40.020 --> 00:07:45.530
more dereferencing will take us to value in
x which will be 6 if u see this is really

00:07:45.530 --> 00:07:52.940
interesting from r we r using one asterisk operator
&amp; we are able to go to q then we are using

00:07:52.940 --> 00:07:59.540
the asterisk operator twice &amp; we reach p &amp; then we
r using the asterisk operator thrice &amp; we reach x.

00:07:59.540 --> 00:08:05.780
Lets make some more changes in this code &amp; run
this in a real compiler so what I'll do here

00:08:05.780 --> 00:08:14.220
is I'll write a statement like this &amp; then
after this statement I'll print the value

00:08:14.220 --> 00:08:25.350
in x. If u run this now as you can see *p,
**q &amp; ***r all these 3 values are 6 the address

00:08:25.350 --> 00:08:32.479
will not be same as we had shown in the example
for obvious reasons &amp; as u can see we are

00:08:32.479 --> 00:08:40.779
able to modify x by doing this chain of de
referencing using this variable r. if we would

00:08:40.779 --> 00:08:53.240
write something like **q = let's say something
like this. Now *p is also referencing x &amp; **q

00:08:53.240 --> 00:08:59.939
is also dereferencing x sorry we are dereferencing
here so any guesses what will be the output

00:08:59.939 --> 00:09:06.800
of this last print statement Well if u see,
x is incremented by 2 here so this was pointer

00:09:06.800 --> 00:09:13.220
to pointer I recommend that you write some
of this code yourself &amp; play a little bit.

00:09:13.220 --> 00:09:18.779
In the coming lessons we will use pointer
to pointer in some real problem scenarios.

00:09:18.779 --> 00:09:19.680
So thanks for watching

