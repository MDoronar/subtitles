WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:03.220
In our previous lessons, we

00:00:03.220 --> 00:00:05.049
defined pointer variables

00:00:05.049 --> 00:00:08.830
and we also saw how to operate upon
pointer variable, how to work with

00:00:08.830 --> 00:00:12.659
pointer variables in c or c++ program

00:00:12.659 --> 00:00:14.729
but we did not really talk about

00:00:14.729 --> 00:00:18.539
the real use cases of pointer variables, in what scenarios we may 

00:00:18.539 --> 00:00:19.410
want to 

00:00:19.410 --> 00:00:21.499
use pointer variables

00:00:21.499 --> 00:00:23.400
So in this lesson we will talk about

00:00:23.400 --> 00:00:26.259
one of the use cases of pointer variables

00:00:26.259 --> 00:00:27.699
and the use case is

00:00:27.699 --> 00:00:30.369
using them, using pointers as

00:00:30.369 --> 00:00:32.099
function arguments

00:00:32.099 --> 00:00:35.890
and we also term this as call by reference

00:00:35.890 --> 00:00:36.720
so

00:00:36.720 --> 00:00:39.280
let's discuss a scenario

00:00:39.280 --> 00:00:41.080
Albert is a beginner programmer

00:00:41.080 --> 00:00:44.540
and he has recently learned about the
concept

00:00:44.540 --> 00:00:46.360
user-defined functions

00:00:46.360 --> 00:00:48.750
Now, he tries to apply this concept

00:00:48.750 --> 00:00:49.749
and he writes

00:00:49.749 --> 00:00:51.760
a simple C program

00:00:51.760 --> 00:00:52.890
like this

00:00:52.890 --> 00:00:56.710
what he is trying to achieve here is
that he has

00:00:56.710 --> 00:00:58.400
an integer variable

00:00:58.400 --> 00:01:01.160
declared and initialized in the main
method

00:01:01.160 --> 00:01:04.619
and wants to increment the value in this variable by one

00:01:04.619 --> 00:01:09.980
so instead of writing something like a plus plus, or a equal to a plus one

00:01:09.980 --> 00:01:12.280
instead of writing a statement like this

00:01:12.280 --> 00:01:14.660
he writes a function increment

00:01:14.660 --> 00:01:16.189
that will take an integer 

00:01:16.189 --> 00:01:17.620
a as argument

00:01:17.620 --> 00:01:21.980
and inside this function he's writing a
statement like a is equal to a plus

00:01:21.980 --> 00:01:22.960
one

00:01:22.960 --> 00:01:26.010
He calls this function increment from
the main method

00:01:26.010 --> 00:01:26.649
passing

00:01:26.649 --> 00:01:28.119
a as argument

00:01:28.119 --> 00:01:31.030
and then he prints the value of a

00:01:31.030 --> 00:01:33.300
now what he is expecting here

00:01:33.300 --> 00:01:37.160
is that the value of a will be incremented
to eleven

00:01:37.160 --> 00:01:39.770
and hence the print statement will print

00:01:39.770 --> 00:01:41.640
a = 11

00:01:41.640 --> 00:01:47.670
but when he runs the program, the output of the print statement is a = 10. Now,

00:01:47.670 --> 00:01:50.110
Albert does not understand why this is
happening

00:01:50.110 --> 00:01:52.580
he has declared a valuable a

00:01:52.580 --> 00:01:57.640
and then he has initialized this variable to 10 and
then he is passing the same a

00:01:57.640 --> 00:01:59.170
to the function increment

00:01:59.170 --> 00:02:03.860
and the same a is being incremented by one in this function

00:02:03.860 --> 00:02:07.210
so why the value of a being printed

00:02:07.210 --> 00:02:08.399
is not eleven

00:02:08.399 --> 00:02:10.829
why is it 10

00:02:10.829 --> 00:02:13.799
now what Albert does not understand well

00:02:13.799 --> 00:02:16.049
or what he probably forgot

00:02:16.049 --> 00:02:18.660
is that whenever we declare a variable

00:02:18.660 --> 00:02:20.229
inside a function

00:02:20.229 --> 00:02:23.209
then we call that variable a local variable

00:02:23.209 --> 00:02:24.490
because as such

00:02:24.490 --> 00:02:26.629
just using the variable name

00:02:26.629 --> 00:02:28.909
we can access that variable only

00:02:28.909 --> 00:02:32.429
inside the same function in which we
have declared the variable

00:02:32.429 --> 00:02:33.769
so these two a

00:02:33.769 --> 00:02:37.599
this a in the function increment and
this a in the function main 

00:02:37.599 --> 00:02:40.299
are actually not the same a

00:02:40.299 --> 00:02:43.089
the 'a' in the function increment is another 'a' 

00:02:43.089 --> 00:02:45.589
when main calls the method increment

00:02:45.589 --> 00:02:47.289
and passes this

00:02:47.289 --> 00:02:48.609
a as argument

00:02:48.609 --> 00:02:50.839
to the function

00:02:50.839 --> 00:02:53.549
then only the value of a is copied

00:02:53.549 --> 00:02:55.460
to this another 'a' which is

00:02:55.460 --> 00:02:56.900
another variable

00:02:56.900 --> 00:02:58.979
local to the increment function

00:02:58.979 --> 00:03:02.359
so what I'll do is, I'll do couple of
modifications in this code to show you

00:03:02.359 --> 00:03:04.369
a better picture

00:03:04.369 --> 00:03:06.340
I will write two print statements

00:03:06.340 --> 00:03:07.679
in this code

00:03:07.679 --> 00:03:11.549
first print statement in the increment method
something like this

00:03:11.549 --> 00:03:16.540
address of variable 'a' in increment is

00:03:16.540 --> 00:03:19.900
uh... as we know if we put ampersand
operator in front of a variable name

00:03:19.900 --> 00:03:22.239
then we get the address

00:03:22.239 --> 00:03:25.119
of that variable

00:03:25.119 --> 00:03:28.129
and I'll comment out this print and I'll write

00:03:28.129 --> 00:03:31.259
one more print in the main method
like this

00:03:31.259 --> 00:03:36.159
and here I print that the address of variable 'a'
in main is ampersand 'a'

00:03:36.159 --> 00:03:38.569
let us now run this and see what happens

00:03:38.569 --> 00:03:40.399
uh... let me also put

00:03:40.399 --> 00:03:42.999
and en of line after 

00:03:42.999 --> 00:03:44.039
we print the

00:03:44.039 --> 00:03:45.180
statement

00:03:45.180 --> 00:03:50.219
and the output is address of variable 'a'
in increment method is printed as

00:03:50.219 --> 00:03:53.049
four four five four four six zero

00:03:53.049 --> 00:03:58.259
and in main it is equal to four four
five four six six two

00:03:58.259 --> 00:04:00.779
these two look similar but they're
not the same

00:04:00.779 --> 00:04:05.519
one is having four four six seven zero in the end
and the another is having four four six zero

00:04:05.519 --> 00:04:08.229
what the values are is not important

00:04:08.229 --> 00:04:11.599
what the addresses are is not important
what's important is that

00:04:11.599 --> 00:04:13.869
these addresses are different

00:04:13.869 --> 00:04:18.610
if the 'a' in main method and the 'a' in increment method were same 

00:04:18.610 --> 00:04:21.949
these two addresses would have been same

00:04:21.949 --> 00:04:24.870
To understand this even better, we will

00:04:24.870 --> 00:04:28.759
try to understand how things happen in
computer's memory when a program

00:04:28.759 --> 00:04:30.139
executes

00:04:30.139 --> 00:04:33.169
When a program on an application is started

00:04:33.169 --> 00:04:35.229
then the computer sets aside

00:04:35.229 --> 00:04:37.590
the machine sets aside or reserves

00:04:37.590 --> 00:04:39.329
some amount of memory

00:04:39.329 --> 00:04:41.759
for the execution of this program

00:04:41.759 --> 00:04:46.020
the memory that is a set aside for the
application is divided into

00:04:46.020 --> 00:04:47.740
is typically divided into

00:04:47.740 --> 00:04:49.479
these four parts

00:04:49.479 --> 00:04:51.149
that we are showing here

00:04:51.149 --> 00:04:53.629
one part of memory is allocated

00:04:53.629 --> 00:04:57.280
to store the various instructions in the program

00:04:57.280 --> 00:05:00.139
the computer needs to keep all these
instructions in the memory

00:05:00.139 --> 00:05:03.830
these instructions that we have in the
program like increment or declare these

00:05:03.830 --> 00:05:05.089
variables

00:05:05.089 --> 00:05:07.039
all these sequential instructions

00:05:07.039 --> 00:05:09.240
one part of the memory is

00:05:09.240 --> 00:05:11.389
one part of the allocated memory is for 

00:05:11.389 --> 00:05:13.960
static or global variables

00:05:13.960 --> 00:05:17.669
if we do not declare a variable inside a function 

00:05:17.669 --> 00:05:21.129
in c++ or c, then it is a global variable

00:05:21.129 --> 00:05:22.660
Now global variables

00:05:22.660 --> 00:05:24.289
can be accessed

00:05:24.289 --> 00:05:25.499
and modified

00:05:25.499 --> 00:05:27.150
anywhere in the program

00:05:27.150 --> 00:05:29.659
unlike local variables which can be

00:05:29.659 --> 00:05:32.870
accessed and modified within a
particular function or within a

00:05:32.870 --> 00:05:34.900
particular code block

00:05:34.900 --> 00:05:37.819
now tthe third part of applications memory is

00:05:37.819 --> 00:05:40.720
called as stack and

00:05:40.720 --> 00:05:42.349
this is really important

00:05:42.349 --> 00:05:45.119
this is where all the local variables go

00:05:45.119 --> 00:05:48.120
and we will mostly be talking about stack

00:05:48.120 --> 00:05:49.439
in this lesson

00:05:49.439 --> 00:05:52.819
and the fourth part is heap

00:05:52.819 --> 00:05:55.069
and we will come to this later

00:05:55.069 --> 00:05:56.479
in our

00:05:56.479 --> 00:05:58.210
forthcoming lessons

00:05:58.210 --> 00:06:01.299
of these four segments of the allocated
memory:

00:06:01.299 --> 00:06:03.490
the text segment,

00:06:03.490 --> 00:06:06.099
the global variable segment and the stack segment.

00:06:06.099 --> 00:06:08.669
These three are fixed and

00:06:08.669 --> 00:06:10.900
they are decided when the program starts

00:06:10.900 --> 00:06:12.099
executing

00:06:12.099 --> 00:06:15.970
the application. However we can keep asking for
more memory for 

00:06:15.970 --> 00:06:17.729
it's heap segment

00:06:17.729 --> 00:06:20.999
during its execution.

00:06:20.999 --> 00:06:24.319
We will cover all of these things in
detail in our forthcoming lessons. Please

00:06:24.319 --> 00:06:25.250
do not get

00:06:25.250 --> 00:06:27.180
scared by these terms.

00:06:27.180 --> 00:06:29.149
Let us now see what happens when

00:06:29.149 --> 00:06:30.370
a program

00:06:30.370 --> 00:06:31.499
executes

00:06:31.499 --> 00:06:34.409
let us say this is our computer's overall memory

00:06:34.409 --> 00:06:35.349
the RAM

00:06:35.349 --> 00:06:37.299
and as we know each

00:06:37.299 --> 00:06:41.119
byte in the memory is addressable. so, let's say

00:06:41.119 --> 00:06:44.779
the memory allocated for our
program is from address two zero zero

00:06:44.779 --> 00:06:45.909
to

00:06:45.909 --> 00:06:46.979
eight zero zero

00:06:46.979 --> 00:06:48.819
and these are the various segments

00:06:48.819 --> 00:06:51.239
of our application's memory and of this

00:06:51.239 --> 00:06:53.959
let's say uh... address three hundred

00:06:53.959 --> 00:06:57.259
to six hundred is allocated for stack

00:06:57.259 --> 00:06:59.729
now there is more memory of course in
the RAM

00:06:59.729 --> 00:07:00.589
after

00:07:00.589 --> 00:07:03.460
uh... address 800 and before address 200

00:07:03.460 --> 00:07:05.479
Ok, so from 200 to 800

00:07:05.479 --> 00:07:08.399
this part of the memory is assigned for
our program

00:07:08.399 --> 00:07:11.810
let's say this Cprogram that we have
in the left

00:07:11.810 --> 00:07:14.409
Now, when a function is invoked

00:07:14.409 --> 00:07:15.709
like when the

00:07:15.709 --> 00:07:18.959
program starts the main method is
initially invoked

00:07:18.959 --> 00:07:21.590
all the information about the method

00:07:21.590 --> 00:07:25.680
all the information about the method call like its parameters, all the

00:07:25.680 --> 00:07:27.270
local variables

00:07:27.270 --> 00:07:30.379
the calling function to which it should return

00:07:30.379 --> 00:07:31.059
the current

00:07:31.059 --> 00:07:34.529
instruction at which is executing, all this infromation

00:07:34.529 --> 00:07:36.519
it's stored in the stack

00:07:36.519 --> 00:07:38.319
so we will take out from

00:07:38.319 --> 00:07:41.319
the stack some part for the main method

00:07:41.319 --> 00:07:43.339
and create a unit

00:07:43.339 --> 00:07:46.029
which we call stack frame

00:07:46.029 --> 00:07:48.749
Each function will have a stack frame

00:07:48.749 --> 00:07:51.149
now we have a variable 'a'

00:07:51.149 --> 00:07:56.029
now memory is allocated for 'a' from this stack frame and the value of 'a' is 10. 

00:07:56.029 --> 00:07:57.729
now the main method calls

00:07:57.729 --> 00:07:59.240
increment function

00:07:59.240 --> 00:08:01.610
what happens when main method calls

00:08:01.610 --> 00:08:04.039
increment is that the machine says "hey

00:08:04.039 --> 00:08:06.359
I will stop your execution for some time

00:08:06.359 --> 00:08:10.580
I will stop at this particular instruction. let me go ahead

00:08:10.580 --> 00:08:11.559
finish this

00:08:11.559 --> 00:08:13.309
method increment

00:08:13.309 --> 00:08:16.509
and then I'll come back to the main
method once I am done with increment".

00:08:16.509 --> 00:08:20.069
Now another stack frame is allocated for
the increment method

00:08:20.069 --> 00:08:22.509
and the parameters in increment method like

00:08:22.509 --> 00:08:24.139
we have a parameter 'a'

00:08:24.139 --> 00:08:26.280
so fresh local variables are created

00:08:26.280 --> 00:08:28.080
corresponding to these parameters

00:08:28.080 --> 00:08:31.870
and whatever values have been passed
are copied to these variables, these

00:08:31.870 --> 00:08:33.720
parameters

00:08:33.720 --> 00:08:36.730
now when we say a = a+1

00:08:36.730 --> 00:08:38.540
here in this statement

00:08:38.540 --> 00:08:39.650
then what happens that

00:08:39.650 --> 00:08:42.590
this 'a' which is local to the increment function, in this particular

00:08:42.590 --> 00:08:43.900
stack frame

00:08:43.900 --> 00:08:46.110
this 'a' is incremented

00:08:46.110 --> 00:08:48.830
they cannot access a variable outside

00:08:48.830 --> 00:08:50.240
its stack frame

00:08:50.240 --> 00:08:52.240
and now increment finishes

00:08:52.240 --> 00:08:54.420
When increment finishes, the control

00:08:54.420 --> 00:08:56.000
returns to the main method

00:08:56.000 --> 00:08:57.790
and what the machine does is

00:08:57.790 --> 00:09:01.470
it clears the stack frame that was allocated for increment

00:09:01.470 --> 00:09:05.550
and main method resumes again. So, main method was paused at this particular instruction

00:09:05.550 --> 00:09:06.740
increment

00:09:06.740 --> 00:09:09.820
so life time of a local variable is

00:09:09.820 --> 00:09:13.990
till the time the function is executing. Now,

00:09:13.990 --> 00:09:17.540
the next statement in main method is a call to the function printf

00:09:17.540 --> 00:09:21.050
printf is not a user defined function. It
is a library function

00:09:21.050 --> 00:09:24.810
the state of execution of main method is
kind of paused and printf is executing

00:09:24.810 --> 00:09:25.610
now

00:09:25.610 --> 00:09:27.880
we often call this particular

00:09:27.880 --> 00:09:31.300
structure call stack or function
call stack

00:09:31.300 --> 00:09:34.830
whatever function is at the top of the
stack is executing

00:09:34.830 --> 00:09:36.660
and remember this stack is

00:09:36.660 --> 00:09:38.730
fixed in size. So, if you

00:09:38.730 --> 00:09:41.880
have a scenario where one function keeps
calling another function

00:09:41.880 --> 00:09:43.800
indefinitely like

00:09:43.800 --> 00:09:46.070
in the case of indefinite recursion

00:09:46.070 --> 00:09:50.330
then the memory of this stack will
overflow and our program will crash

00:09:50.330 --> 00:09:53.430
ok, but that is not relevant for this
scenario

00:09:53.430 --> 00:09:56.830
so now you must be getting a picture of
what happens when one function calls

00:09:56.830 --> 00:09:58.280
another function

00:09:58.280 --> 00:10:01.510
this 'a' is in the stack frame of the
main method

00:10:01.510 --> 00:10:03.610
main is our calling function

00:10:03.610 --> 00:10:07.210
and increment is our called function

00:10:07.210 --> 00:10:10.650
When we call a function in the
calling function, the argument is also

00:10:10.650 --> 00:10:11.750
known as

00:10:11.750 --> 00:10:13.290
actual argument

00:10:13.290 --> 00:10:16.290
and in the called function, the argument is
known as

00:10:16.290 --> 00:10:17.490
formal argument

00:10:17.490 --> 00:10:21.340
all that happens is that actual argument
is actually mapped

00:10:21.340 --> 00:10:23.340
to a formal agreement

00:10:23.340 --> 00:10:28.420
so when this function call happens 'a'
mapped to, 'a' as an actual argument

00:10:28.420 --> 00:10:31.310
is mapped to another 'a' which is a formal argument

00:10:31.310 --> 00:10:34.450
instead of 'a', if we were having a 'x' here

00:10:34.450 --> 00:10:38.120
so we would have written something like
int x is the argument and 'x' is

00:10:38.120 --> 00:10:40.270
x plus one then

00:10:40.270 --> 00:10:42.790
'a' would have been mapped to x

00:10:42.790 --> 00:10:46.420
so the value of 'a' will be copied to
variable 'x'

00:10:46.420 --> 00:10:47.820
Now, when we make such a

00:10:47.820 --> 00:10:49.770
function call where

00:10:49.770 --> 00:10:54.340
we basically have one variable being
mapped to another variable, the value

00:10:54.340 --> 00:10:55.469
in one variable

00:10:55.469 --> 00:10:59.750
copied to another variable, then such a
function call is also called as

00:10:59.750 --> 00:11:00.629
call by 

00:11:00.629 --> 00:11:02.200
value

00:11:02.200 --> 00:11:04.220
so this is what Albert was doing

00:11:04.220 --> 00:11:06.210
making a call by value

00:11:06.210 --> 00:11:09.570
and that's why he was he was not able to get the desired result

00:11:09.570 --> 00:11:11.720
but can we get the result that Albert

00:11:11.720 --> 00:11:12.860
wanted to have

00:11:12.860 --> 00:11:15.840
Albert wanted to use this variable 'a'

00:11:15.840 --> 00:11:18.809
which is local to the main method
inside the

00:11:18.809 --> 00:11:20.680
increment function

00:11:20.680 --> 00:11:22.240
Can we really do so?

00:11:22.240 --> 00:11:24.320
Well! yes, we can do so

00:11:24.320 --> 00:11:29.060
if we use pointers as function
arguments. let us now look at this code

00:11:29.060 --> 00:11:33.760
and I am drawing only the stack here so
that I'm able to show the simulation

00:11:33.760 --> 00:11:36.150
of program execution neatly. 

00:11:36.150 --> 00:11:39.010
Now what we're doing here is that we
do not have

00:11:39.010 --> 00:11:40.690
an argument which is

00:11:40.690 --> 00:11:41.780
integer

00:11:41.780 --> 00:11:45.270
in this function increment, we have an argument which is pointer to integer

00:11:45.270 --> 00:11:49.030
and pointer to integer as we know will store the address of an

00:11:49.030 --> 00:11:49.900
integer

00:11:49.900 --> 00:11:53.910
so now what we are doing is that in the increment function, we are passing

00:11:53.910 --> 00:11:55.620
the address of 'a'

00:11:55.620 --> 00:11:58.810
so when the program will start executing, the main method will be invoked

00:11:58.810 --> 00:12:03.120
first. Let's say this is the stack frame of the main method

00:12:03.120 --> 00:12:05.220
let's say 300 to

00:12:05.220 --> 00:12:09.270
350, this address is the stack frame of the main method and
of main method

00:12:09.270 --> 00:12:10.620
there would be

00:12:10.620 --> 00:12:12.580
a local variable 'a'

00:12:12.580 --> 00:12:18.720
in this main method, let's say the address at
which 'a' is stored is 308

00:12:18.720 --> 00:12:21.410
this may not be in proportion but still
let's say

00:12:21.410 --> 00:12:23.050
this is how it is stored

00:12:23.050 --> 00:12:25.460
Now when main method calls increment

00:12:25.460 --> 00:12:28.350
then a local variable corresponding to the
parameter

00:12:28.350 --> 00:12:29.920
'p' is created

00:12:29.920 --> 00:12:33.590
and this is a pointer to integer and the value that is passed to this particular

00:12:33.590 --> 00:12:34.940
function

00:12:34.940 --> 00:12:37.550
the value that gets stored in this
particular

00:12:37.550 --> 00:12:40.549
sorry its not a function, its a variable. the value that gets

00:12:40.549 --> 00:12:41.580
copied or

00:12:41.580 --> 00:12:43.990
stored in this particular variable would be

00:12:43.990 --> 00:12:47.790
308, the address of 'a'. So. 

00:12:47.790 --> 00:12:49.820
'p' is pointing to 'a'

00:12:49.820 --> 00:12:52.830
Now, in this statement here, when we say asterisk 'p'

00:12:52.830 --> 00:12:57.090
we dereference this address, so we are saying here that 

00:12:57.090 --> 00:13:00.050
*p is value stored in address p 

00:13:00.050 --> 00:13:01.290
so we say that

00:13:01.290 --> 00:13:04.480
increment the value stored at address p by one

00:13:04.480 --> 00:13:09.170
the value stored at address 308 gets incremented by one. So 'a'

00:13:09.170 --> 00:13:11.400
is now eleven

00:13:11.400 --> 00:13:16.190
so, now when increments initiatives and
we come back to the main method and the

00:13:16.190 --> 00:13:19.800
next line gets executed which is the
print statement

00:13:19.800 --> 00:13:22.000
then a is now 11

00:13:22.000 --> 00:13:26.420
if u run this program then what gets
printed is a = 11

00:13:26.420 --> 00:13:30.090
such a function call in which, instead of
passing the value of a variable, we

00:13:30.090 --> 00:13:31.290
pass the

00:13:31.290 --> 00:13:35.330
address of the variable, so that we have
a reference to the variable

00:13:35.330 --> 00:13:40.990
and we can dereference it and perform some operations is called call by reference

00:13:40.990 --> 00:13:44.260
so if we use pointers as function
arguments

00:13:44.260 --> 00:13:48.720
then we are using call by reference. Call by reference can save us a lot of

00:13:48.720 --> 00:13:53.140
memory because instead of creating a
copy of a large and complex 

00:13:53.140 --> 00:13:53.920
data-type

00:13:53.920 --> 00:13:56.350
if we just use a reference to it

00:13:56.350 --> 00:14:01.720
and using a reference will also cost us some memory, but very small amount of memory, then

00:14:01.720 --> 00:14:05.670
we are saved from creating a new copy
of a complex datatype

00:14:05.670 --> 00:14:09.450
in the coming lessons, we will see more of the layout of application's 

00:14:09.450 --> 00:14:10.900
memory and

00:14:10.900 --> 00:14:13.420
what all things we can do using pointers

00:14:13.420 --> 00:14:14.020
So, thanks for watching!

