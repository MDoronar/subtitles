0
00:00:00,310 --> 00:00:03,220
En nuestras lecciones anteriores, definimos 
variables de puntero

1
00:00:03,220 --> 00:00:05,049
y también hemos visto cómo operar sobre 
variable

2
00:00:05,049 --> 00:00:08,830
de puntero, como trabajar con variables de 
puntero

3
00:00:08,830 --> 00:00:12,659
en el programa en C ++ o C,

4
00:00:12,659 --> 00:00:14,729
pero que en realidad no hablamos de los

5
00:00:14,729 --> 00:00:18,539
casos de uso real de las variables de 
puntero. ¿En qué escenarios

6
00:00:18,539 --> 00:00:19,410
es posible que

7
00:00:19,410 --> 00:00:21,499
desee utilizar variables de puntero.

8
00:00:21,499 --> 00:00:23,400
Así que en esta lección vamos a hablar de

9
00:00:23,400 --> 00:00:26,259
uno de los casos de uso de variables de 
puntero.

10
00:00:26,259 --> 00:00:27,699
Y el caso de uso

11
00:00:27,699 --> 00:00:30,369
es el uso de punteros

12
00:00:30,369 --> 00:00:32,099
como argumentos de la función.

13
00:00:32,099 --> 00:00:35,890
Y nosotros también llamamos esto como 
llamadas por referencia.

14
00:00:35,890 --> 00:00:36,720
Así que vamos a

15
00:00:36,720 --> 00:00:39,280
hablar de un escenario.

16
00:00:39,280 --> 00:00:41,080
Albert es un programador principiante y

17
00:00:41,080 --> 00:00:44,540
hace poco que ha aprendido acerca

18
00:00:44,540 --> 00:00:46,360
de las funciones definidas por el usuario 
concepto.

19
00:00:46,360 --> 00:00:48,750
Ahora, trata de aplicar

20
00:00:48,750 --> 00:00:49,749
este concepto y que

21
00:00:49,749 --> 00:00:51,760
escribe un programa en

22
00:00:51,760 --> 00:00:52,890
C simple como esto.

23
00:00:52,890 --> 00:00:56,710
Lo que está tratando de lograr aquí

24
00:00:56,710 --> 00:00:58,400
es que tiene una variable entera declarar

25
00:00:58,400 --> 00:01:01,160
e inicializar en el método principal y

26
00:01:01,160 --> 00:01:04,619
quiere incrementar el valor de esta variable 
por uno.

27
00:01:04,619 --> 00:01:09,980
Así que en vez de escribir algo así

28
00:01:09,980 --> 00:01:12,280
como un plus plus, o una igual a

29
00:01:12,280 --> 00:01:14,660
un más uno; en lugar de escribir una

30
00:01:14,660 --> 00:01:16,189
declaración como esta, escribe un incremento 
de la

31
00:01:16,189 --> 00:01:17,620
función que tendrá un entero como argumento y

32
00:01:17,620 --> 00:01:21,980
un interior de esta función que está 
escribiendo

33
00:01:21,980 --> 00:01:22,960
una declaración como la que a es igual a un 
más uno.

34
00:01:22,960 --> 00:01:26,010
Él llama a esta función de

35
00:01:26,010 --> 00:01:26,649
incremento a partir del método principal

36
00:01:26,649 --> 00:01:28,119
que pasa una como argumento y

37
00:01:28,119 --> 00:01:31,030
luego se imprime el valor de a.

38
00:01:31,030 --> 00:01:33,300
Ahora lo que se espera es que el

39
00:01:33,300 --> 00:01:37,160
valor de una se incrementará a once y

40
00:01:37,160 --> 00:01:39,770
de ahí la instrucción print imprimirá a =

41
00:01:39,770 --> 00:01:41,640
11, pero cuando se ejecuta el programa de

42
00:01:41,640 --> 00:01:47,670
la salida del comando de impresión es un = 
10. Ahora, Albert no entiende

43
00:01:47,670 --> 00:01:50,110
por qué está sucediendo esto.

44
00:01:50,110 --> 00:01:52,580
ha declarado a 'a' variable y luego se ha

45
00:01:52,580 --> 00:01:57,640
inicializado esta variable a 10 y luego pasa 
lo

46
00:01:57,640 --> 00:01:59,170
mismo un incremento de la función y el mismo

47
00:01:59,170 --> 00:02:03,860
"a" se está incrementado en uno en esta 
función.

48
00:02:03,860 --> 00:02:07,210
Entonces ¿por qué el valor de

49
00:02:07,210 --> 00:02:08,399
un ser impreso no es once?

50
00:02:08,399 --> 00:02:10,829
¿Por qué es 10?

51
00:02:10,829 --> 00:02:13,799
Ahora lo que Albert no entiende

52
00:02:13,799 --> 00:02:16,049
bien ni lo que probablemente se

53
00:02:16,049 --> 00:02:18,660
olvidó es que cada vez que

54
00:02:18,660 --> 00:02:20,229
se declara una variable dentro de

55
00:02:20,229 --> 00:02:23,209
una función entonces llamamos esa variable

56
00:02:23,209 --> 00:02:24,490
una variable local, porque, como tal,

57
00:02:24,490 --> 00:02:26,629
simplemente usando el nombre de la

58
00:02:26,629 --> 00:02:28,909
variable que podemos acceder a esa

59
00:02:28,909 --> 00:02:32,429
variable sólo dentro de la misma

60
00:02:32,429 --> 00:02:33,769
Así pues, estas dos 'a'.

61
00:02:33,769 --> 00:02:37,599
Esta 'a' en el mínimo de la función y la "a"

62
00:02:37,599 --> 00:02:40,299
en la principal función no son en realidad 
la misma "a".

63
00:02:40,299 --> 00:02:43,089
La "a" en la función de incremento es otra 
'a'.

64
00:02:43,089 --> 00:02:45,589
Cuando principal llama el

65
00:02:45,589 --> 00:02:47,289
incremento método y pasa

66
00:02:47,289 --> 00:02:48,609
esta 'a' como argumento

67
00:02:48,609 --> 00:02:50,839
de la función a

68
00:02:50,839 --> 00:02:53,549
continuación, sólo el valor

69
00:02:53,549 --> 00:02:55,460
de "a" se copia

70
00:02:55,460 --> 00:02:56,900
a esta otra 'a'

71
00:02:56,900 --> 00:02:58,979
que es otra variable

72
00:02:58,979 --> 00:03:02,359
Entonces, ¿qué voy a hacer es que voy a 
hacer par

73
00:03:02,359 --> 00:03:04,369
de modificaciones en este código se puede 
mostrar una mejor imagen.

74
00:03:04,369 --> 00:03:06,340
Voy a escribir dos sentencias

75
00:03:06,340 --> 00:03:07,679
de impresión en este código.

76
00:03:07,679 --> 00:03:11,549
sentencia de impresión por primera vez en el 
método de la subasta. Algo como esto.

77
00:03:11,549 --> 00:03:16,540
Dirección de la variable "a"

78
00:03:16,540 --> 00:03:19,900
en la subasta es que sabemos. Si ponemos 
operador de signo delante

79
00:03:19,900 --> 00:03:22,239
de un nombre de variable entonces

80
00:03:22,239 --> 00:03:25,119
obtenemos la dirección de esa variable.

81
00:03:25,119 --> 00:03:28,129
Y voy a comentar a cabo esta impresión y voy

82
00:03:28,129 --> 00:03:31,259
a escribir una impresión más en el principal 
método como este.

83
00:03:31,259 --> 00:03:36,159
Y aquí puedo imprimir que la dirección de la 
variable 'a' en el signo principal es 'a'.

84
00:03:36,159 --> 00:03:38,569
Veamos ahora corremos esto y ver qué pasa.

85
00:03:38,569 --> 00:03:40,399
También quisiera poner

86
00:03:40,399 --> 00:03:42,999
y al final

87
00:03:42,999 --> 00:03:44,039
de la línea

88
00:03:44,039 --> 00:03:45,180
después de que

89
00:03:45,180 --> 00:03:50,219
Y la salida es la dirección de la variable 
'a' en el método

90
00:03:50,219 --> 00:03:53,049
de la subasta se imprime como cuatro cuatro 
cinco cuatro cuatro seis cero

91
00:03:53,049 --> 00:03:58,259
y en la principal, es igual a cuatro, 
cuatro, cinco y seis cuatro seis dos.

92
00:03:58,259 --> 00:04:00,779
Estos dos parecen similares pero no son lo 
mismo.

93
00:04:00,779 --> 00:04:05,519
Uno tiene cuatro cuatro seis siete cero en 
el extremo y el otro es tener cuatro cuatro 
seis cero.

94
00:04:05,519 --> 00:04:08,229
Lo que los valores son no es importante.

95
00:04:08,229 --> 00:04:11,599
Lo que las direcciones son no es importante. 
Lo que es importante es

96
00:04:11,599 --> 00:04:13,869
que estas direcciones son diferentes.

97
00:04:13,869 --> 00:04:18,610
Si la 'a' en el método principal y la "a" en 
el

98
00:04:18,610 --> 00:04:21,949
método de la subasta fueron dos direcciones 
misma estos habrían sido iguales.

99
00:04:21,949 --> 00:04:24,870
Para entender esto mejor vamos a tratar

100
00:04:24,870 --> 00:04:28,759
de entender cómo ocurren las cosas en

101
00:04:28,759 --> 00:04:30,139
la memoria del equipo cuando se ejecuta un 
programa.

102
00:04:30,139 --> 00:04:33,169
Cuando se inicia un programa

103
00:04:33,169 --> 00:04:35,229
en una aplicación, el equipo

104
00:04:35,229 --> 00:04:37,590
deja de lado; o se

105
00:04:37,590 --> 00:04:39,329
reserva una cierta cantidad de

106
00:04:39,329 --> 00:04:41,759
memoria para la ejecución de este programa.

107
00:04:41,759 --> 00:04:46,020
La memoria que se una

108
00:04:46,020 --> 00:04:47,740
a un lado de la

109
00:04:47,740 --> 00:04:49,479
aplicación se divide típicamente en

110
00:04:49,479 --> 00:04:51,149
estas cuatro partes que están mostrando aquí.

111
00:04:51,149 --> 00:04:53,629
Una parte de la memoria se asigna

112
00:04:53,629 --> 00:04:57,280
para almacenar las diversas instrucciones en 
el programa.

113
00:04:57,280 --> 00:05:00,139
El equipo tiene que seguir todas las 
instrucciones en la memoria.

114
00:05:00,139 --> 00:05:03,830
Estas instrucciones que tenemos en el

115
00:05:03,830 --> 00:05:05,089
programa como mínimo de la subasta

116
00:05:05,089 --> 00:05:07,039
o declarar estas variables; todas estas 
instrucciones secuenciales.

117
00:05:07,039 --> 00:05:09,240
Una parte de la

118
00:05:09,240 --> 00:05:11,389
memoria asignada es para

119
00:05:11,389 --> 00:05:13,960
las variables estáticas o globales.

120
00:05:13,960 --> 00:05:17,669
Si no declaramos una variable dentro de una 
función

121
00:05:17,669 --> 00:05:21,129
en C ++ o C, entonces es una variable global.

122
00:05:21,129 --> 00:05:22,660
Las variables globales se pueden

123
00:05:22,660 --> 00:05:24,289
acceder y modificar cualquier parte

124
00:05:24,289 --> 00:05:25,499
del programa a diferencia de

125
00:05:25,499 --> 00:05:27,150
las variables locales que se

126
00:05:27,150 --> 00:05:29,659
puede acceder y modificar dentro

127
00:05:29,659 --> 00:05:32,870
de una función en particular

128
00:05:32,870 --> 00:05:34,900
o dentro de un bloque de código en 
particular.

129
00:05:34,900 --> 00:05:37,819
Ahora, la tercera parte de la

130
00:05:37,819 --> 00:05:40,720
memoria aplicaciones se llama como la

131
00:05:40,720 --> 00:05:42,349
pila y esto es realmente importante.

132
00:05:42,349 --> 00:05:45,119
Aquí es donde todas las variables

133
00:05:45,119 --> 00:05:48,120
locales van y que la mayoría

134
00:05:48,120 --> 00:05:49,439
se habla de pila en esta lección.

135
00:05:49,439 --> 00:05:52,819
Y la cuarta parte

136
00:05:52,819 --> 00:05:55,069
es del montón y

137
00:05:55,069 --> 00:05:56,479
vendremos a esto más

138
00:05:56,479 --> 00:05:58,210
adelante en nuestras próximas lecciones.

139
00:05:58,210 --> 00:06:01,299
De estos cuatro segmentos de

140
00:06:01,299 --> 00:06:03,490
la memoria asignada: el segmento

141
00:06:03,490 --> 00:06:06,099
de texto, el segmento variable

142
00:06:06,099 --> 00:06:08,669
global y el segmento de

143
00:06:08,669 --> 00:06:10,900
pila, estos tres son fijos

144
00:06:10,900 --> 00:06:12,099
y que se deciden cuando

145
00:06:12,099 --> 00:06:15,970
el programa comienza a ejecutar la 
aplicación. Sin embargo podemos seguir

146
00:06:15,970 --> 00:06:17,729
pidiendo más memoria para

147
00:06:17,729 --> 00:06:20,999
su segmento montón durante su ejecución.

148
00:06:20,999 --> 00:06:24,319
Vamos a cubrir todas estas cosas en detalle 
en nuestras próximas lecciones. Por favor,

149
00:06:24,319 --> 00:06:25,250
no se

150
00:06:25,250 --> 00:06:27,180
asustan por

151
00:06:27,180 --> 00:06:29,149
Veamos ahora lo

152
00:06:29,149 --> 00:06:30,370
que sucede cuando

153
00:06:30,370 --> 00:06:31,499
un programa se ejecuta.

154
00:06:31,499 --> 00:06:34,409
Digamos que se trata de la memoria global de 
nuestro ordenador.

155
00:06:34,409 --> 00:06:35,349
El carnero.

156
00:06:35,349 --> 00:06:37,299
Y como sabemos que cada

157
00:06:37,299 --> 00:06:41,119
byte en la memoria es direccionable. Por lo 
tanto, digamos que

158
00:06:41,119 --> 00:06:44,779
la memoria asignada para nuestro

159
00:06:44,779 --> 00:06:45,909
programa es de dirección de

160
00:06:45,909 --> 00:06:46,979
dos cero cero cero cero

161
00:06:46,979 --> 00:06:48,819
a ocho y estos son

162
00:06:48,819 --> 00:06:51,239
los diversos segmentos de la memoria de 
nuestra aplicación. Y de este, dirección

163
00:06:51,239 --> 00:06:53,959
300 a 600 se

164
00:06:53,959 --> 00:06:57,259
asigna a la pila.

165
00:06:57,259 --> 00:06:59,729
Ahora hay más memoria, por supuesto, en la 
RAM.

166
00:06:59,729 --> 00:07:00,589
Después de dirección 800

167
00:07:00,589 --> 00:07:03,460
y 200 antes del discurso.

168
00:07:03,460 --> 00:07:05,479
Ok, por lo que desde 200 a la 800 Es

169
00:07:05,479 --> 00:07:08,399
una parte de la memoria se asigna para 
nuestro programa

170
00:07:08,399 --> 00:07:11,810
digamos que este programa C que tenemos en 
la izquierda.

171
00:07:11,810 --> 00:07:14,409
Ahora, cuando se invoca una función

172
00:07:14,409 --> 00:07:15,709
como cuando el programa se inicia

173
00:07:15,709 --> 00:07:18,959
el principal método se invoca inicialmente

174
00:07:18,959 --> 00:07:21,590
toda la información sobre la llamada

175
00:07:21,590 --> 00:07:25,680
al método como sus parámetros, todas

176
00:07:25,680 --> 00:07:27,270
las variables locales, la función de

177
00:07:27,270 --> 00:07:30,379
llamada a la que debe devolver,

178
00:07:30,379 --> 00:07:31,059
la instrucción actual en el que

179
00:07:31,059 --> 00:07:34,529
se está ejecutando , toda esta

180
00:07:34,529 --> 00:07:36,519
información se almacena en la pila.

181
00:07:36,519 --> 00:07:38,319
Así que vamos a sacar de

182
00:07:38,319 --> 00:07:41,319
la pila de alguna parte para

183
00:07:41,319 --> 00:07:43,339
el método principal y crear una

184
00:07:43,339 --> 00:07:46,029
unidad que llamamos marco de pila.

185
00:07:46,029 --> 00:07:48,749
Cada función tendrá un marco de pila.

186
00:07:48,749 --> 00:07:51,149
Ahora tenemos una variable 'a'.

187
00:07:51,149 --> 00:07:56,029
Ahora se asigna memoria para 'a' de este 
marco de pila y el valor de 'a' es 10. Ahora 
el método

188
00:07:56,029 --> 00:07:57,729
principal llama a

189
00:07:57,729 --> 00:07:59,240
la función de la subasta.

190
00:07:59,240 --> 00:08:01,610
¿Qué ocurre cuando el método principal llama

191
00:08:01,610 --> 00:08:04,039
a la subasta es que la máquina

192
00:08:04,039 --> 00:08:06,359
dice: "Voy a detener su ejecución durante 
algún tiempo.

193
00:08:06,359 --> 00:08:10,580
Voy a parar en esta instrucción particular. 
Déjame ir por delante, termino este

194
00:08:10,580 --> 00:08:11,559
incremento método y luego voy a

195
00:08:11,559 --> 00:08:13,309
volver al método principal una vez

196
00:08:13,309 --> 00:08:16,509
que haya terminado con el incremento ".

197
00:08:16,509 --> 00:08:20,069
Ahora, otro marco de pila se asigna para el 
método de

198
00:08:20,069 --> 00:08:22,509
la subasta y los parámetros en el método de 
la subasta. Tenemos un parámetro "a", por lo

199
00:08:22,509 --> 00:08:24,139
que las variables locales frescos son

200
00:08:24,139 --> 00:08:26,280
creados correspondientes a estos parámetros y

201
00:08:26,280 --> 00:08:28,080
cualesquiera que sean los valores se

202
00:08:28,080 --> 00:08:31,870
han transmitido se copian a estas variables. 
Estos parámetros ahora cuando decimos

203
00:08:31,870 --> 00:08:33,720
que a = a +

204
00:08:33,720 --> 00:08:36,730
1 aquí en esta declaración

205
00:08:36,730 --> 00:08:38,540
entonces lo que ocurre que

206
00:08:38,540 --> 00:08:39,650
esta 'a' que es local

207
00:08:39,650 --> 00:08:42,590
a la función de incremento,

208
00:08:42,590 --> 00:08:43,900
en este marco de pila

209
00:08:43,900 --> 00:08:46,110
particular, esto se incrementa 'a'.

210
00:08:46,110 --> 00:08:48,830
Ellos no pueden acceder a una

211
00:08:48,830 --> 00:08:50,240
variable fuera de su marco de pila.

212
00:08:50,240 --> 00:08:52,240
Y ahora incrementar acabados.

213
00:08:52,240 --> 00:08:54,420
Cuando termina la subasta, el control vuelve

214
00:08:54,420 --> 00:08:56,000
al método principal y lo que la

215
00:08:56,000 --> 00:08:57,790
máquina hace es que salga del marco

216
00:08:57,790 --> 00:09:01,470
de pila que se asignó para el

217
00:09:01,470 --> 00:09:05,550
incremento y principal método se reanuda de 
nuevo. Por lo tanto, el método principal se 
detuvo

218
00:09:05,550 --> 00:09:06,740
en este incremento instrucción en particular 
por lo

219
00:09:06,740 --> 00:09:09,820
que el tiempo de vida de una variable

220
00:09:09,820 --> 00:09:13,990
local es hasta el momento la función se está 
ejecutando. Ahora, la siguiente sentencia en 
el método

221
00:09:13,990 --> 00:09:17,540
principal es una llamada a la función printf.

222
00:09:17,540 --> 00:09:21,050
Printf no es una función definida por el 
usuario. Es una función de biblioteca.

223
00:09:21,050 --> 00:09:24,810
El estado de ejecución del método principal 
es una especie de pausa y printf está 
ejecutando.

224
00:09:24,810 --> 00:09:25,610
Ahora llamamos a menudo esta

225
00:09:25,610 --> 00:09:27,880
pila estructura llamada o llamada

226
00:09:27,880 --> 00:09:31,300
a la función de pila particular.

227
00:09:31,300 --> 00:09:34,830
Cualquiera que sea la función que está en la 
parte superior de la pila se está ejecutando.

228
00:09:34,830 --> 00:09:36,660
Y recuerda esta pila

229
00:09:36,660 --> 00:09:38,730
se fija en tamaño. Por lo tanto, si usted 
tiene un escenario

230
00:09:38,730 --> 00:09:41,880
en el que una de las funciones sigue

231
00:09:41,880 --> 00:09:43,800
llamando a otra función indefinidamente, 
como en el

232
00:09:43,800 --> 00:09:46,070
caso de la repetición indefinida entonces el 
recuerdo

233
00:09:46,070 --> 00:09:50,330
de esta pila se desbordará y nuestro 
programa se bloqueará.

234
00:09:50,330 --> 00:09:53,430
OK, pero que no es relevante para este 
escenario.

235
00:09:53,430 --> 00:09:56,830
Así que ahora usted debe estar recibiendo 
una imagen de

236
00:09:56,830 --> 00:09:58,280
lo que sucede cuando una función llama a 
otra función.

237
00:09:58,280 --> 00:10:01,510
Esta 'a' es en el marco de pila del método 
principal.

238
00:10:01,510 --> 00:10:03,610
Es nuestra principal función que llama

239
00:10:03,610 --> 00:10:07,210
y el incremento es nuestra llamada función.

240
00:10:07,210 --> 00:10:10,650
Cuando llamamos a una función, la

241
00:10:10,650 --> 00:10:11,750
función de llamada en el argumento

242
00:10:11,750 --> 00:10:13,290
también se conoce como argumento real.

243
00:10:13,290 --> 00:10:16,290
Y en la función llamada, el

244
00:10:16,290 --> 00:10:17,490
argumento se conoce como argumento formal.

245
00:10:17,490 --> 00:10:21,340
Todo lo que sucede es que el argumento

246
00:10:21,340 --> 00:10:23,340
actual es en realidad asigna a un acuerdo 
formal.

247
00:10:23,340 --> 00:10:28,420
Y cuando esto sucede llamada a la función 
"a" asignan a, 'a' como

248
00:10:28,420 --> 00:10:31,310
un argumento actual se asigna a otro 'a', 
que es un argumento formal.

249
00:10:31,310 --> 00:10:34,450
En lugar de "a", si estábamos teniendo una 
'x'

250
00:10:34,450 --> 00:10:38,120
aquí algo, así que habría escrito como int x

251
00:10:38,120 --> 00:10:40,270
es el argumento y 'x' es x más uno,

252
00:10:40,270 --> 00:10:42,790
entonces "a" se habría asignado a x por lo

253
00:10:42,790 --> 00:10:46,420
que el valor de ' un "se copiarán a la 
variable 'x'.

254
00:10:46,420 --> 00:10:47,820
Ahora, cuando hacemos una llamada

255
00:10:47,820 --> 00:10:49,770
a la función, tales donde

256
00:10:49,770 --> 00:10:54,340
tenemos básicamente una variable que

257
00:10:54,340 --> 00:10:55,469
se está asignada a otra

258
00:10:55,469 --> 00:10:59,750
variable, el valor de una

259
00:10:59,750 --> 00:11:00,629
variable copiada a otra variable,

260
00:11:00,629 --> 00:11:02,200
entonces esa llamada función se

261
00:11:02,200 --> 00:11:04,220
Así que esto es lo que Albert

262
00:11:04,220 --> 00:11:06,210
estaba haciendo hacer una llamada por valor

263
00:11:06,210 --> 00:11:09,570
y que por eso era que no

264
00:11:09,570 --> 00:11:11,720
era capaz de obtener el resultado deseado,

265
00:11:11,720 --> 00:11:12,860
pero podemos obtener el resultado que 
Alberto quería tener.

266
00:11:12,860 --> 00:11:15,840
Albert quería utilizar esta variable 'a',

267
00:11:15,840 --> 00:11:18,809
que es local en el método

268
00:11:18,809 --> 00:11:20,680
principal dentro de la función de incremento.

269
00:11:20,680 --> 00:11:22,240
Realmente podemos hacerlo?

270
00:11:22,240 --> 00:11:24,320
Sí, podemos hacerlo.

271
00:11:24,320 --> 00:11:29,060
Si usamos punteros como argumentos de la 
función. Veamos ahora miro a este código y 
estoy dibujando

272
00:11:29,060 --> 00:11:33,760
solamente la pila de aquí, así que soy capaz

273
00:11:33,760 --> 00:11:36,150
de mostrar la simulación de la ejecución del 
programa cuidadosamente. Ahora lo que 
estamos haciendo

274
00:11:36,150 --> 00:11:39,010
aquí es que no tenemos

275
00:11:39,010 --> 00:11:40,690
un argumento que es entero

276
00:11:40,690 --> 00:11:41,780
en función de este incremento,

277
00:11:41,780 --> 00:11:45,270
tenemos un argumento que es puntero a un 
entero.

278
00:11:45,270 --> 00:11:49,030
Y el puntero a entero como lo conocemos

279
00:11:49,030 --> 00:11:49,900
va a almacenar la dirección de un número 
entero.

280
00:11:49,900 --> 00:11:53,910
Así que ahora lo que estamos haciendo es que 
en

281
00:11:53,910 --> 00:11:55,620
la función de incremento estamos pasando la 
dirección de la "a".

282
00:11:55,620 --> 00:11:58,810
Por eso, cuando el programa se iniciará la

283
00:11:58,810 --> 00:12:03,120
ejecución, el principal método será invocado 
por primera vez. Digamos que este es el 
marco de pila del método principal.

284
00:12:03,120 --> 00:12:05,220
Digamos que de

285
00:12:05,220 --> 00:12:09,270
300 a 350. Esta dirección es el marco de 
pila del método principal y del método 
principal.

286
00:12:09,270 --> 00:12:10,620
Habría una variable

287
00:12:10,620 --> 00:12:12,580
local "a" en

288
00:12:12,580 --> 00:12:18,720
este método principal. Digamos que la 
dirección en la que se almacena 'a' es 308.

289
00:12:18,720 --> 00:12:21,410
Esto puede no ser proporcional pero aún así. 
Digamos que esta es la

290
00:12:21,410 --> 00:12:23,050
forma en que se almacena.

291
00:12:23,050 --> 00:12:25,460
Ahora, cuando el método principal llama a

292
00:12:25,460 --> 00:12:28,350
la subasta a continuación, se crea una

293
00:12:28,350 --> 00:12:29,920
variable local correspondiente al parámetro 
"p" y

294
00:12:29,920 --> 00:12:33,590
esto es un puntero a un entero

295
00:12:33,590 --> 00:12:34,940
y el valor que se pasa a esta función en 
particular.

296
00:12:34,940 --> 00:12:37,550
El valor que se almacena en este particular.

297
00:12:37,550 --> 00:12:40,549
Lo sentimos, no es una función, que es una 
variable. El valor que se

298
00:12:40,549 --> 00:12:41,580
copia o se almacena

299
00:12:41,580 --> 00:12:43,990
en esta variable particular

300
00:12:43,990 --> 00:12:47,790
sería 308, la dirección de la "a". Asi que. 
'P' está

301
00:12:47,790 --> 00:12:49,820
apuntando a 'a'.

302
00:12:49,820 --> 00:12:52,830
Ahora, en esta declaración aquí, cuando 
decimos asterisco

303
00:12:52,830 --> 00:12:57,090
'p' que eliminar la referencia de esta 
dirección. Así que aquí estamos diciendo que 
* p

304
00:12:57,090 --> 00:13:00,050
es el valor almacenado en la dirección de

305
00:13:00,050 --> 00:13:01,290
p por eso decimos que el incremento del

306
00:13:01,290 --> 00:13:04,480
valor almacenado en la dirección p por uno.

307
00:13:04,480 --> 00:13:09,170
El valor almacenado en la dirección 308 se 
incrementa en uno. Así 'a'

308
00:13:09,170 --> 00:13:11,400
es ahora once.

309
00:13:11,400 --> 00:13:16,190
Por lo tanto, ahora cuando las iniciativas 
incrementos y volvemos

310
00:13:16,190 --> 00:13:19,800
al método principal y la siguiente línea es 
ejecutado, que

311
00:13:19,800 --> 00:13:22,000
es la sentencia print entonces a es ahora de 
11 años.

312
00:13:22,000 --> 00:13:26,420
Si ejecuta este programa entonces lo que se 
imprime es a = 11.

313
00:13:26,420 --> 00:13:30,090
Tal llamada a la función en la que en lugar 
de

314
00:13:30,090 --> 00:13:31,290
pasar el valor de una variable que pasamos 
la dirección de

315
00:13:31,290 --> 00:13:35,330
la variable de modo que tenemos una 
referencia a la variable

316
00:13:35,330 --> 00:13:40,990
y podemos eliminar la referencia y realizar 
algunas operaciones se denomina llamada por 
referencia.

317
00:13:40,990 --> 00:13:44,260
Así que si usamos punteros como argumentos de

318
00:13:44,260 --> 00:13:48,720
la función, entonces estamos usando la 
llamada por referencia. Llamadas por 
referencia nos puede ahorrar una gran

319
00:13:48,720 --> 00:13:53,140
cantidad de memoria, porque en lugar de crear

320
00:13:53,140 --> 00:13:53,920
una copia de un grande y complejo de

321
00:13:53,920 --> 00:13:56,350
tipo de datos sólo tiene que utilizar una 
referencia a él.

322
00:13:56,350 --> 00:14:01,720
Y el uso de una referencia también nos 
costará un poco de memoria, pero muy pequeña 
cantidad

323
00:14:01,720 --> 00:14:05,670
de memoria, entonces estamos salvados de la 
creación de una nueva copia de un tipo de 
datos complejo.

324
00:14:05,670 --> 00:14:09,450
En las próximas lecciones, vamos a ver más de

325
00:14:09,450 --> 00:14:10,900
la disposición de la memoria de la 
aplicación y

326
00:14:10,900 --> 00:14:13,420
lo que todo lo que podemos hacer uso de 
punteros.

327
00:14:13,420 --> 00:14:14,020
Así que, gracias por ver!

