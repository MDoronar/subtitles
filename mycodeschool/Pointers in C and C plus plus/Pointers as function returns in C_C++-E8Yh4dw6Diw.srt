0
00:00:00,480 --> 00:00:07,899
En esta lección vamos a hablar de punteros 
como el tipo de cambio de funciones. Puntero 
es simplemente

1
00:00:07,899 --> 00:00:13,779
otro tipo de datos. Es sólo que un puntero 
almacena la dirección de otro tipo de datos. 
Por lo tanto, es muy posible

2
00:00:13,779 --> 00:00:19,230
que una función para volver puntero. Pero 
debemos entender que los casos de uso en las 
que

3
00:00:19,230 --> 00:00:24,609
podemos desear para devolver un puntero a 
partir de una función. Así que vamos a 
tratar de entender esto.

4
00:00:24,609 --> 00:00:28,429
Voy a empezar por escribir algo de código.

5
00:00:28,429 --> 00:00:34,079
Ahora quiero escribir un programa en C muy 
simple al principio. Quiero escribir una 
función de complementos, que tendrá dos 
enteros

6
00:00:34,079 --> 00:00:40,300
como argumentos y resumir estos dos números 
y devolver la suma.

7
00:00:40,300 --> 00:00:46,129
Así que digamos que declaramos otra variable 
es igual a

8
00:00:46,129 --> 00:00:52,440
C y C a + b y la función devuelve c. Ahora 
en el principal método que voy a inicializar 
dos variables. Vamos a nombrar estas

9
00:00:52,440 --> 00:00:58,899
variables x e y. Digamos que x es igual a 2 
e y es igual a 4

10
00:00:58,899 --> 00:01:06,070
y vamos a tener otra variable z que será el 
retorno de esta

11
00:01:06,070 --> 00:01:14,660
función Añadir y vamos a pasar x e y como 
argumentos para esta función. Por último, 
voy a imprimir algo como suma es igual a z. 
No es difícil

12
00:01:14,660 --> 00:01:20,970
adivinar la salida aquí. Ahora voy a 
modificar este código un poco, pero antes de 
que yo quiero

13
00:01:20,970 --> 00:01:30,080
hablar de este concepto una vez más que x, 
y, z son variables locales

14
00:01:30,080 --> 00:01:36,360
a la función principal y a, b, y c son local 
para agregar la función. Lo que realmente 
sucede cuando llamamos a la función Add es 
que el valor

15
00:01:36,360 --> 00:01:44,860
de esta variable x del principal se copia a 
la variable A de Agregar. Y el valor de a de

16
00:01:44,860 --> 00:01:51,780
principal se copia en B del complemento. ¿Y 
si llamamos a estas variables en el principal

17
00:01:51,780 --> 00:01:58,710
a, b y c en lugar de x, y, z. Si ejecutamos 
este código, la salida será la misma. Esta 
vez lo que diremos es que el valor de a

18
00:01:58,710 --> 00:02:05,480
en la principal se copia en una de Add y el

19
00:02:05,480 --> 00:02:07,100
valor de b en el principal se copia a B de 
Agregar.

20
00:02:07,100 --> 00:02:13,500
Este es un principal y en esto una en 
Agregar. No son lo mismo. Esto se puede 
comprobar mediante

21
00:02:13,500 --> 00:02:20,209
la impresión de algo como esto. Estoy 
imprimiendo las direcciones de estos dos 'de 
una en mi código y como se puede

22
00:02:20,209 --> 00:02:28,750
ver en la dirección de un principal es algo 
así como 2.883.032 y en Agregar Es 
2.882.792. Así que no

23
00:02:28,750 --> 00:02:33,480
son lo mismo. Esto significa que estas 
variables no son los mismos. Están en 
diferentes

24
00:02:33,480 --> 00:02:35,109
direcciones de memoria.

25
00:02:35,109 --> 00:02:40,749
Los nombres de las variables son locales o 
específicos de una función en particular. En 
nuestro ejemplo, el método o la principal 
función puede ser

26
00:02:40,749 --> 00:02:46,840
llamada función de "llamada" y la función de 
complementos que puede

27
00:02:46,840 --> 00:02:52,930
llamarse "llamada" función en esta llamada 
particular, cuando estamos diciendo que

28
00:02:52,930 --> 00:02:59,030
c es igual a Agregar y pasando a y b . Y 
esta llamada donde a y b en el principal 
están siendo copiados

29
00:02:59,030 --> 00:03:06,579
a a y b en complemento, esto se llama una 
llamada por valor.

30
00:03:06,579 --> 00:03:12,359
Ahora lo que quiero hacer es, en lugar de 
pasar

31
00:03:12,359 --> 00:03:18,260
por valor Quiero pasar las direcciones de 
estas dos variables. Por eso quiero decir 
que quiero pasar la dirección de

32
00:03:18,260 --> 00:03:24,689
una y la dirección de b para la función Add. 
Por lo que la firma de función Add

33
00:03:24,689 --> 00:03:31,060
debe ser tal que deben recibir las 
direcciones. Así que voy a decir que, de 
acuerdo, se necesitan 2 punteros a enteros a 
y b. Y ahora podemos acceder a los valores 
de estas

34
00:03:31,060 --> 00:03:39,760
direcciones mediante el uso de este operador 
asterisco que

35
00:03:39,760 --> 00:03:46,430
se utiliza para eliminar la referencia de 
una dirección. Ahora, una llamada de este 
tipo se llama llamadas por referencia. a y b 
son números enteros locales a la función 
principal y

36
00:03:46,430 --> 00:03:52,439
en la función de añadir, a y b no son 
variables enteras. a y b son variables

37
00:03:52,439 --> 00:04:01,650
de puntero, el puntero a enteros. Por lo que 
su tipo es diferente. No están int, son int 
* Pero,

38
00:04:01,650 --> 00:04:07,159
al fin y al cabo, también son

39
00:04:07,159 --> 00:04:12,749
variables que son locales a la función add. 
Es sólo que no son números enteros. Y ahora 
que estoy usando estas dos variables que son 
números enteros puntero para

40
00:04:12,749 --> 00:04:19,570
acceder a estas dos variables a y b que 
están en el método principal.

41
00:04:19,570 --> 00:04:23,450
Y, para ello utilizamos el operador 
asterisco y ahora, este código también 
debería funcionar.

42
00:04:23,450 --> 00:04:30,550
Voy a escribir unas cuantas declaraciones de 
impresión dentro de esta función Add. He 
tratado de imprimir una y he tratado de

43
00:04:30,550 --> 00:04:37,800
imprimir un * e inicialmente estaba imprimir 
y escribir una. Así que ahora & a nosotros 
debe

44
00:04:37,800 --> 00:04:43,120
dar la dirección de la variable puntero. un 
debe nos da la dirección de una de 
principal, porque eso es lo que

45
00:04:43,120 --> 00:04:50,440
esta variable almacena y un * deben darnos 
el valor de a en la principal. Veamos en

46
00:04:50,440 --> 00:04:59,020
la salida. Ahora bien, como se puede ver 
aquí, la dirección de un principal es en 
3.537.612

47
00:04:59,020 --> 00:05:05,110
y la dirección de una de Agregar es otra 
cosa, pero el valor de a

48
00:05:05,110 --> 00:05:11,310
en Añadir, que es la dirección de una de las 
principales es igual a 3.537.612. Así que la 
primera y la tercera líneas son iguales Y

49
00:05:11,310 --> 00:05:17,540
utilizando la dirección, que imprime el 
valor que es igual a 2.

50
00:05:17,540 --> 00:05:23,130
Ahora voy a limpiar algunas de estas 
declaraciones de impresión. Volviendo a 
nuestra función suma,

51
00:05:23,130 --> 00:05:29,580
estamos volviendo este valor c. Y una vez 
más en el método principal, estamos 
recogiendo

52
00:05:29,580 --> 00:05:37,140
este valor c en otra variable que es de c 
principal. Ahora ¿por qué no hacer algo como 
pasar la dirección de esta c en función de 
complementos.

53
00:05:37,140 --> 00:05:41,130
Entonces, ¿qué vamos a hacer ahora es 
diremos que queremos volver puntero

54
00:05:41,130 --> 00:05:47,240
al número entero de esta función y aquí 
vamos a volver & c. Ahora y cuando se pone 
delante de

55
00:05:47,240 --> 00:05:53,320
una variable que nos da la dirección. Ahora, 
por supuesto, aquí tendremos que recoger 
esta dirección en

56
00:05:53,320 --> 00:05:59,330
particular, por lo que tendremos que definir 
una variable puntero. Ahora bien, esto no 
estaría mal. Ahora, cuando estamos 
imprimiendo, vamos a tener que imprimir el

57
00:05:59,330 --> 00:06:07,470
valor en la dirección de ser apuntado por 
esta variable. Ahora lo que acabamos de 
hacer es modificamos esta

58
00:06:07,470 --> 00:06:13,910
Añadir función para devolver un puntero a un 
entero. Hay dos sintaxis Podemos decir int y 
luego poner este signo

59
00:06:13,910 --> 00:06:21,020
asterisco o podemos decir int * y poner el 
signo delante

60
00:06:21,020 --> 00:06:28,470
del nombre de la función Añadir y ambos son 
estas sintaxis válida. Ahora bien, esta 
función devuelve

61
00:06:28,470 --> 00:06:34,540
el puntero a un entero. Corramos este 
programa y ver qué pasa.

62
00:06:34,540 --> 00:06:42,940
Permítanme también libertad de romper esta 
declaración de impresión aquí. Está bien, 
así que la salida parece estar bien.

63
00:06:42,940 --> 00:06:48,820
Ahora has cogido algún error lógico con este 
código ya? Si no ha quedarse

64
00:06:48,820 --> 00:06:54,430
conmigo por algún tiempo. Ahora lo que 
quiero hacer es que quiero escribir

65
00:06:54,430 --> 00:06:59,270
otra función, una función simple que se 
imprimirá "hola mundo". Así que voy a 
nombrar esta función PrintHelloWorld y en

66
00:06:59,270 --> 00:07:05,050
esta función que voy a escribir una 
declaración de impresión sencilla. Ahora, 
antes de imprimir esta suma, lo que haré es 
Voy a

67
00:07:05,050 --> 00:07:12,580
llamar a esta función PrintHelloWorld () Y 
vamos a ver qué pasa ahora. Vaya -

68
00:07:12,580 --> 00:07:18,740
esto parece extraño! Suma que no es correcto 
ahora. Acabo de ver que venía muy bien en mi

69
00:07:18,740 --> 00:07:24,230
última vuelta cuando yo no llamo a esto 
PrintHelloWorld. ¿Que pasó? Así que vamos a 
tratar de

70
00:07:24,230 --> 00:07:29,920
entender lo que realmente ha pasado aquí? 
Voy a volver a este esquema familiar de

71
00:07:29,920 --> 00:07:34,800
varias secciones de la memoria de la 
aplicación. La memoria que se asigna a un

72
00:07:34,800 --> 00:07:41,640
programa típicamente se divide en las 
siguientes secciones. Todas las variables 
locales y la información sobre las

73
00:07:41,640 --> 00:07:47,240
ejecuciones de llamadas de función va a la 
pila. Así que corramos a través de este 
código, vamos a simular

74
00:07:47,240 --> 00:07:52,090
este código y ver lo que realmente está 
sucediendo en la memoria. Para cada llamada 
de función, una parte de la

75
00:07:52,090 --> 00:07:57,720
memoria de la pila se asigna para su 
ejecución. Ahora llamamos a este marco de

76
00:07:57,720 --> 00:08:03,670
pila de ese método o la función. Cuando el 
programa se inicia la ejecución, en primer 
lugar se invoca el método principal.

77
00:08:03,670 --> 00:08:09,390
Así, en el marco de la pila de la memoria se 
destinará a la función principal y

78
00:08:09,390 --> 00:08:14,200
todas las variables locales de la función 
principal va a vivir dentro de este marco de 
pila. Digamos que la dirección de inicio de 
este marco de pila es

79
00:08:14,200 --> 00:08:20,930
100 y la dirección final de este marco de 
pila es 130. Y vamos a tener 3 variables 
locales

80
00:08:20,930 --> 00:08:29,310
creadas aquí - a, b y PTR. a y b son números 
enteros

81
00:08:29,310 --> 00:08:36,399
y ptr es un puntero entero. Digamos que una 
está en la dirección 100 y b es

82
00:08:36,399 --> 00:08:42,969
en la dirección 112 y PTR es en la dirección 
120. Sólo estoy haciendo estas suposiciones. 
Ahora, cuando el principal método vendrá en 
esta línea en

83
00:08:42,969 --> 00:08:49,680
la que se está llamando Añadir función, su 
ejecución se

84
00:08:49,680 --> 00:08:56,490
detendrá y ahora la memoria será asignado 
para la ejecución de Agregar. En cualquier 
momento cualquier función es en la parte 
superior de la pila se está ejecutando.

85
00:08:56,490 --> 00:09:03,610
principal método esperará función de 
complementos para completar y devolver. Aquí 
debo decir que a es igual a 2, b es

86
00:09:03,610 --> 00:09:09,430
igual a 4 y ahora Añadir viene aquí en la 
pila. Digamos Agregar consigue memoria desde 
130 a la 160 y

87
00:09:09,430 --> 00:09:18,040
también tiene 3 Añadir variables locales - 
a, b y c. a y b son punteros a enteros.

88
00:09:18,040 --> 00:09:26,639
El valor de una será 100 y el valor de b 
será 112. Digamos que sus direcciones

89
00:09:26,639 --> 00:09:37,699
son 130, 140 y 144. Una vez más, estos son 
supuestos simplemente al azar. Ahora se 
calcula como c

90
00:09:37,699 --> 00:09:45,699
* a * b +. un apunte a esta ubicación y b 
apunte a esta ubicación. * Un valor en la 
dirección es almacenada en una y

91
00:09:45,699 --> 00:09:53,350
b * es el valor en la dirección almacenada 
en b. Por lo que este será el 6 c aquí.

92
00:09:53,350 --> 00:09:59,360
Se añadirán estos dos valores. Ahora bien, 
esta función suma devolverá la dirección de 
su

93
00:09:59,360 --> 00:10:06,769
variable local c, que es 144 y terminar su 
ejecución. Por lo que este será ptr 144 y 
ahora será

94
00:10:06,769 --> 00:10:13,319
desasignado la memoria que se asigna a la 
función Añadir. Ahora bien, esta memoria por 
encima de dirección

95
00:10:13,319 --> 00:10:22,309
130 se puede utilizar para otras llamadas a 
funciones. Y a pesar de que esta variable 
ptr almacena la dirección 144, la dirección

96
00:10:22,309 --> 00:10:27,699
de este bloque en particular (que tipo de 
puntos a este bloque en particular),

97
00:10:27,699 --> 00:10:33,029
la fecha que aquí no está garantizada, ya 
que esta memoria ha sido desasignado. Ahora 
llegamos aquí, a este PrintHelloWorld y ahora

98
00:10:33,029 --> 00:10:39,749
la memoria de pila se asignarán a 
PrintHelloWorld

99
00:10:39,749 --> 00:10:45,019
por encima de este marco de pila del método 
principal. Este es el principal. Así que 
digamos que PrintHelloWorld consigue este 
bloque de

100
00:10:45,019 --> 00:10:51,300
memoria desde la dirección 130 para hacer 
frente a 150. Ahora no hay ninguna variable

101
00:10:51,300 --> 00:10:56,930
local en esta función PrintHelloWorld. Pero 
aún así, la ejecución llamada de

102
00:10:56,930 --> 00:11:03,309
función consiste en el almacenamiento de 
información. Ahora esta sección, desde 130 a 
la 150 es de PrintHelloWorld. Voy a escribir 
PHW

103
00:11:03,309 --> 00:11:09,649
- acceso directo para PrintHelloWorld. Y ha 
sido sobre-escrito. Así que este bloque a

104
00:11:09,649 --> 00:11:16,199
las 144 tiendas más valor 6. Así que cuando 
llegamos aquí, en esta sentencia de 
impresión, para imprimir

105
00:11:16,199 --> 00:11:21,860
el valor en esta dirección en particular, 
obtenemos un valor de basura. Ahora la 
pregunta obvia sería, ¿por qué hemos llegado 
hasta

106
00:11:21,860 --> 00:11:26,420
el valor correcto cuando no estábamos 
haciendo el llamado a PrintHelloWorld. Me 
gustaría decir

107
00:11:26,420 --> 00:11:32,490
que tuve suerte. Tal vez porque no me llamo 
cualquier otra función después

108
00:11:32,490 --> 00:11:37,779
de hacer una llamada a Añadir, mi máquina no 
sobreescribir

109
00:11:37,779 --> 00:11:45,360
o borrar los datos en esa ubicación de 
memoria particular. Pero cuando tenía que 
hacer una llamada a PrintHelloWorld que se 
acostumbró memoria. Si ve, hemos pasado las 
direcciones de estas dos

110
00:11:45,360 --> 00:11:51,119
variables a y b de la función principal para 
agregar. Pero eso está bien porque 
denominada función siempre está

111
00:11:51,119 --> 00:11:56,670
por encima de la función de llamada en la 
pila.

112
00:11:56,670 --> 00:12:01,399
Así que cada vez esta función llamada está 
ejecutando, la función que llama estará en 
la memoria. Así que si está ejecutando 
Agregar, principal

113
00:12:01,399 --> 00:12:06,680
se garantiza que sea en la memoria. Así 
direcciones de variables en

114
00:12:06,680 --> 00:12:11,540
principal serán accesibles para Agregar. 
Pero si tratamos de devolver una variable 
local de la llamada functionback a

115
00:12:11,540 --> 00:12:16,119
la función de llamada - al igual que si 
queremos volver una variable

116
00:12:16,119 --> 00:12:21,850
local desde Añadir a la principal, cuando 
ese acabados de función y el

117
00:12:21,850 --> 00:12:27,730
control vuelve de nuevo a la función de 
llamada que la memoria ya ha sido 
desasignado. Por lo que está bien para pasar 
algo de abajo hacia arriba en esta pila de

118
00:12:27,730 --> 00:12:33,170
llamadas, o más bien debería decir que está 
bien para pasar una variable local o la

119
00:12:33,170 --> 00:12:40,089
dirección de una variable local de abajo 
hacia arriba en la pila pero no es buena

120
00:12:40,089 --> 00:12:45,139
idea volver la dirección de una variable 
local de arriba a abajo en la pila de 
llamadas. Espero que

121
00:12:45,139 --> 00:12:45,720
esto tenga sentido.

122
00:12:45,720 --> 00:12:50,089
Así que ahora la pregunta obvia sería - 
¿Cuáles son los casos

123
00:12:50,089 --> 00:12:56,449
de uso en las que podemos desear para 
devolver punteros de funciones. Bueno, si 
tenemos la dirección de algún bloque de 
memoria en la sección montón o

124
00:12:56,449 --> 00:13:01,269
algún bloque de memoria en la sección 
global, entonces podemos volver con 
seguridad la dirección

125
00:13:01,269 --> 00:13:07,279
de estos bloques porque cualquier cosa en el 
montón tiene que cancelar la asignación 
explícita. Tenemos el control de su 
cancelación

126
00:13:07,279 --> 00:13:14,029
de asignación a diferencia de la pila. Y 
todo lo que está en la sección global,

127
00:13:14,029 --> 00:13:21,069
una variable global, vive para toda la 
duración del programa. Puedo usar malloc o 
nuevo operador en C

128
00:13:21,069 --> 00:13:22,790
++ para obtener algo de memoria en el montón.

129
00:13:22,790 --> 00:13:29,519
Así que si modifico mi código de algo como 
esto, lo declararía c como un puntero

130
00:13:29,519 --> 00:13:37,910
a un entero y conseguir algo de espacio 
asignado en el montón mediante una llamada a 
malloc. malloc es una función de biblioteca 
que devuelve puntero, pero

131
00:13:37,910 --> 00:13:45,179
devuelve puntero a una dirección que es en 
el montón. Así se obtiene un bloque de 
memoria y el uso de

132
00:13:45,179 --> 00:13:51,129
esta variable puntero ahora, podemos 
escribir este valor - * a

133
00:13:51,129 --> 00:13:57,759
* b + - en ese bloque de memoria en 
particular. Y luego podemos volver esta 
dirección c, que es la misma dirección que

134
00:13:57,759 --> 00:14:03,259
malloc nos devolverá, sino que estamos a 
salvo porque ahora estamos volviendo 
dirección

135
00:14:03,259 --> 00:14:10,559
de un bloque que se encuentra en el montón y 
no en la pila. Y esto va a funcionar ahora.

136
00:14:10,559 --> 00:14:15,790
Ahora en este código, digamos que esta 
llamada a malloc

137
00:14:15,790 --> 00:14:21,490
nos da este bloque en la dirección 500 en el 
montón. c ahora solo está apuntando a este 
bloque y el

138
00:14:21,490 --> 00:14:26,949
uso de c hemos escrito estos datos aquí, 
este valor 6. Y ahora, cuando añadir 
acabados, la dirección devuelta por la

139
00:14:26,949 --> 00:14:34,459
función de complementos que es la dirección 
500 sigue siendo válida. Todavía tenemos los 
datos allí y que no vamos a cancelar la 
asignación.

140
00:14:34,459 --> 00:14:39,740
Cualquier cosa en el montón tiene que 
cancelar la asignación explícita. Así, 
mientras que devolver punteros de funciones, 
tenemos

141
00:14:39,740 --> 00:14:45,149
que tener cuidado con el ámbito de 
aplicación. Debemos estar seguros de que la 
dirección no se vuelve a utilizar para

142
00:14:45,149 --> 00:14:50,689
almacenar otra cosa o que los datos no se 
borran de esa dirección.

143
00:14:50,689 --> 00:14:56,970
En la mayoría de los casos que volveremos 
punteros a memoria que se asigna en el

144
00:14:56,970 --> 00:15:01,759
montón, o la memoria que se encuentra en la 
sección global, la sección de variables 
globales. En nuestras próximas lecciones, un 
lugar en el que va

145
00:15:01,759 --> 00:15:07,100
a utilizar como punteros devuelve la función 
en nuestro código

146
00:15:07,100 --> 00:15:09,050
es la implementación de la estructura de 
datos de lista enlazada.

147
00:15:09,050 --> 00:15:12,540
Así que esto era como punteros devuelve la 
función. Gracias por ver.

