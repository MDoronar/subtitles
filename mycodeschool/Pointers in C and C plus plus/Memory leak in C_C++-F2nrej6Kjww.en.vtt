WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:04.549
In our previous lessons, we have learned
the concept of dynamic memory allocation.

00:00:04.549 --> 00:00:08.309
We have understood what is stack and what is
heap

00:00:08.309 --> 00:00:12.000
in applications memory. Now in this this
lesson, we're going to talk about one

00:00:12.000 --> 00:00:13.969
situation which has caused

00:00:13.969 --> 00:00:17.050
by improper use of dynamic memory

00:00:17.050 --> 00:00:20.900
or the memory on the heap and this
situation is memory leak.

00:00:20.900 --> 00:00:24.750
A quick recap of some of the concepts
that we have discussed in our previous

00:00:24.750 --> 00:00:25.590
lessons.

00:00:25.590 --> 00:00:29.250
The memory that is allocated for the
execution of

00:00:29.250 --> 00:00:33.399
a program or what we can also
call application's memory is

00:00:33.399 --> 00:00:37.879
typically divided into these four
segments or these four sections.

00:00:37.879 --> 00:00:41.690
One section store stuff instructions in
the program

00:00:41.690 --> 00:00:46.050
that need to be executed this section is
called the code segment or the

00:00:46.050 --> 00:00:51.280
text segment, another section is use to
store the global variables, the

00:00:51.280 --> 00:00:52.180
variables which

00:00:52.180 --> 00:00:57.079
are declared inside functions and have
lifetime of the whole application.

00:00:57.079 --> 00:01:01.920
Another section of the memory is used to
execute the function calls

00:01:01.920 --> 00:01:05.920
and store all the local variables this
section is called stack.

00:01:05.920 --> 00:01:10.040
The size of these three segments the
code segment, the global variable segment,

00:01:10.040 --> 00:01:11.360
and the stack segment

00:01:11.360 --> 00:01:15.509
are fixed and decided when the program is
compiling

00:01:15.509 --> 00:01:19.640
and that is that the compile-time, and
the forth section

00:01:19.640 --> 00:01:24.880
which is quite heap or dynamic memory
does not have a fixed size.

00:01:24.880 --> 00:01:28.810
Heap can grow as per our need.

00:01:28.810 --> 00:01:33.920
As we know we get memory from the heap
by making the call to malloc function in

00:01:33.920 --> 00:01:34.600
C

00:01:34.600 --> 00:01:38.110
and when we are done using that memory
on the heap, we

00:01:38.110 --> 00:01:42.650
make a call to the free function to deallocate
or free that particular memory.

00:01:42.650 --> 00:01:46.180
In C++ apart from malloc and
free, we can also use

00:01:46.180 --> 00:01:50.600
the operator new to get some memory and
operator delete

00:01:50.600 --> 00:01:54.280
to free that memory. Leak is a
situation when we

00:01:54.280 --> 00:01:58.200
get to memory on the heap and do not
free it

00:01:58.200 --> 00:02:01.790
when we are done using it. So our application

00:02:01.790 --> 00:02:06.570
is actually holding on to some unused
memory on the heap but why do we call

00:02:06.570 --> 00:02:08.390
the situation memory leak

00:02:08.390 --> 00:02:11.700
and why does it happen due to improper
use of

00:02:11.700 --> 00:02:15.840
dynamic memory only, due to improper use
of heap only and not some

00:02:15.840 --> 00:02:19.830
other sections of applications memory.
We will try to understand this

00:02:19.830 --> 00:02:25.770
through one simple program so what I'll do is 
I'll write one simple program and show

00:02:25.770 --> 00:02:30.450
the simulation of its execution in the
memory to explain these concepts.

00:02:30.450 --> 00:02:34.570
In my C program here, I'm going to write a
very simple betting game

00:02:34.570 --> 00:02:38.020
and the game is that we have three
positions

00:02:38.020 --> 00:02:41.480
and three cards Jack, queen and king

00:02:41.480 --> 00:02:45.560
Initially jack is at the first position.
Queen is at the second position

00:02:45.560 --> 00:02:48.940
and King is at the third position and

00:02:48.940 --> 00:02:52.430
then computer shuffles these cards so
that

00:02:52.430 --> 00:02:55.489
the positions of these cards

00:02:55.489 --> 00:02:58.489
is changed, is randomized and now

00:02:58.489 --> 00:03:01.680
the player has to guess the position of the
Queen.

00:03:01.680 --> 00:03:05.030
He has to bet some amount of money.

00:03:05.030 --> 00:03:10.030
Let's say it's a virtual cash and if
he win see if he predicts the

00:03:10.030 --> 00:03:13.700
position if I guess the position of
queen correctly, he takes over it three

00:03:13.700 --> 00:03:15.970
times the amount that he had bet

00:03:15.970 --> 00:03:19.130
and if he loses he simply loses the bet
amount.

00:03:19.130 --> 00:03:23.700
Let's say player initially has
hundred-dollar of virtual cash

00:03:23.700 --> 00:03:27.410
and he can me as many times as he wants

00:03:27.410 --> 00:03:31.530
and until he runs out of cash. So let us
know implement this game

00:03:31.530 --> 00:03:35.440
the first thing that I want to do is I
wanted to declare a global variable

00:03:35.440 --> 00:03:38.660
named cash that at any point will
store

00:03:38.660 --> 00:03:42.570
the virtual cash available with the
player. Initially, he has

00:03:42.570 --> 00:03:46.680
hundred dollars of virtual cash and then
in the main method I will declare a

00:03:46.680 --> 00:03:47.690
variable name

00:03:47.690 --> 00:03:51.579
bet and have a great code something
like this. While

00:03:51.579 --> 00:03:56.019
cash is greater than zero, while player still
has some cash.

00:03:56.019 --> 00:03:59.120
We will ask him to bet something

00:03:59.120 --> 00:04:03.290
and we will it take this input in this
variable bet

00:04:03.290 --> 00:04:07.480
using scanf. For negative scenarios
like bet equals zero,

00:04:07.480 --> 00:04:12.500
bet being greater than the cash available,
we will break out of this loop. We

00:04:12.500 --> 00:04:13.609
will end our game.

00:04:13.609 --> 00:04:17.410
For all other conditions, let's say it
will make a call to play function, 

00:04:17.410 --> 00:04:21.959
and of course now we will have to write
the play function. We will be passing

00:04:21.959 --> 00:04:22.640
bet

00:04:22.640 --> 00:04:26.280
to the play function, so bet will be an
argument.

00:04:26.280 --> 00:04:29.570
Now in a play function, I will declare a

00:04:29.570 --> 00:04:32.770
character J array of size 3 and initially, 

00:04:32.770 --> 00:04:37.610
we will have the character at the
first position to say that

00:04:37.610 --> 00:04:40.800
there is jack at the first position.
J for

00:04:40.800 --> 00:04:44.660
jack and similarly Q is for Queen and
K is for king

00:04:44.660 --> 00:04:48.040
and now the computer must perform a
randomized shuffling.

00:04:48.040 --> 00:04:51.920
So we will write a print statement like
this. Now we need to find a logic to make

00:04:51.920 --> 00:04:53.639
a random shuffle of cards. 

00:04:53.639 --> 00:04:57.750
One such logic is that we can make a
call to random number generator

00:04:57.750 --> 00:04:58.790
function in C.

00:04:58.790 --> 00:05:02.540
To use the random number generator
first we will make a call to

00:05:02.540 --> 00:05:05.780
srand function and pass it an argument

00:05:05.780 --> 00:05:09.590
something like this. I'll come back to
what I'm doing

00:05:09.590 --> 00:05:14.370
here in a srand by making a call to
srand and now let's say we run a loop

00:05:14.370 --> 00:05:15.930
five times and we will

00:05:15.930 --> 00:05:20.160
choose any two random positions among
0, 1 and 2

00:05:20.160 --> 00:05:23.300
and swap the later said these positions
in the array.

00:05:23.300 --> 00:05:27.360
Let's say these positions are X&amp;Y. Now
then we make a call to rand function

00:05:27.360 --> 00:05:28.190
we will get

00:05:28.190 --> 00:05:32.200
at random number but we want a number
between zero and

00:05:32.200 --> 00:05:35.360
2, O and 2 included. So we will take modulo by

00:05:35.360 --> 00:05:38.720
3 so that we either get 0 or 1 or 2

00:05:38.720 --> 00:05:41.810
So we will take 2 such a random
positions,

00:05:41.810 --> 00:05:45.610
with statements like this and now

00:05:45.610 --> 00:05:49.030
what we can do is we can swap the
character at these positions.

00:05:49.030 --> 00:05:52.130
So we will use a temporary variable. First
we will

00:05:52.130 --> 00:05:55.950
store the character that position X
in

00:05:55.950 --> 00:05:59.740
temp and then we will do something
like this.

00:05:59.740 --> 00:06:04.580
I'm short of space here. I'm writing three
statements in the same line.

00:06:04.580 --> 00:06:08.710
Okay so now swapping is done.
 
104
00:06:08,710 --&gt; 00:06:11,770
So we are swapping or shuffling

00:06:11.770 --> 00:06:17.310
characters at two positions, five times
each time we are picking up two positions

00:06:17.310 --> 00:06:23.110
X and Y randomly by making call to rand
function and taking a modulo by 3.

00:06:23.110 --> 00:06:26.900
So this will guarantee us that X and Y is
between 0 and 2

00:06:26.900 --> 00:06:32.110
that will be valid positions. By
making a call to rand function, we will

00:06:32.110 --> 00:06:32.350
get

00:06:32.350 --> 00:06:35.950
the random numbers, but we also

00:06:35.950 --> 00:06:39.690
used this srand once and passed this

00:06:39.690 --> 00:06:44.390
time null the return of time function.

00:06:44.390 --> 00:06:47.440
In random number generation, there is
something

00:06:47.440 --> 00:06:51.640
is one concept of seeding the random
number generator, so

00:06:51.640 --> 00:06:54.680
we are passing seed to random number
generator. We will not go into the

00:06:54.680 --> 00:06:56.840
details of random number generation now.

00:06:56.840 --> 00:07:00.370
Now what I'll do in the play function
is I'll have a variable

00:07:00.370 --> 00:07:04.080
named players guess and

00:07:04.080 --> 00:07:08.680
I'll ask the player to guess the
position of Queen

00:07:08.680 --> 00:07:12.010
and then I will use scanf to take the
input.

00:07:12.010 --> 00:07:15.160
Now if the player is correct then

00:07:15.160 --> 00:07:19.840
the character at that particular
position in character array c

00:07:19.840 --> 00:07:22.860
and the position will be one minus what
the

00:07:22.860 --> 00:07:27.070
their inputs because the player is inputting
1, 2 or 3 that will

00:07:27.070 --> 00:07:31.290
map to 0, 1 and 2 in the array. So if the
character is queen

00:07:31.290 --> 00:07:34.680
he has won. So his overall cash

00:07:34.680 --> 00:07:38.190
will be incremented by three times the
bet amount

00:07:38.190 --> 00:07:43.870
else he has lost and his cash will be
decremented by the bet amount.

00:07:43.870 --> 00:07:47.190
So in the case of when we will write
a print statement like this.

00:07:47.190 --> 00:07:50.450
We will say that you have won and the
result is this and your

00:07:50.450 --> 00:07:55.170
total cash right now is this. Remember
cash is a global variable

00:07:55.170 --> 00:07:59.190
and we will print something similar if
the player loses.

00:07:59.190 --> 00:08:02.610
Finally our play function is looking
something like this

00:08:02.610 --> 00:08:06.390
and we have also moved this variable
cash at the

00:08:06.390 --> 00:08:10.600
top. In the main method, I have added two
more print statement initially.

00:08:10.600 --> 00:08:14.970
Let's now play this game and see what
happens. What I have done is

00:08:14.970 --> 00:08:18.910
I have compiled this code and created an
executable

00:08:18.910 --> 00:08:22.630
named game.exe and now I'm going to
run that executable.

00:08:22.630 --> 00:08:27.780
So this is asking what's your bet.
Let's say we want to bet five Dollars

00:08:27.780 --> 00:08:31.390
on position 1 and I lose

00:08:31.390 --> 00:08:34.849
on my balance now is ninety five dollars.
Let's bet again,

00:08:34.849 --> 00:08:40.450
this time again I lose and I can go on
playing. So I'm losing again and again.

00:08:40.450 --> 00:08:44.920
Finally a win after a longtime.

00:08:44.920 --> 00:08:48.360
I can go on playing this game but I want
to show you something else.

00:08:48.360 --> 00:08:51.720
I have opened the task manager of
Windows

00:08:51.720 --> 00:08:55.400
and here as you can see and this
highlighted

00:08:55.400 --> 00:08:58.780
row is for game.exe. The third
column here

00:08:58.780 --> 00:09:02.150
is the memory consumed by this executable
game.exe.

00:09:02.150 --> 00:09:05.500
You will have to see this in full screen.

00:09:05.500 --> 00:09:10.610
Now as I go on playing, the memory 
consumption here the memory that

00:09:10.610 --> 00:09:14.860
showing here is not increasing.
It's always 348 k. 

00:09:14.860 --> 00:09:18.690
Now I'll go ahead and make some
changes in my code.

00:09:18.690 --> 00:09:22.930
I'll do here is, this particular
character array that I'm creating as a

00:09:22.930 --> 00:09:25.270
local variable in the play function

00:09:25.270 --> 00:09:28.710
right now it's created as a local
variable,

00:09:28.710 --> 00:09:33.650
so it will go on the stack. I want to
create a character array on the heap.

00:09:33.650 --> 00:09:34.830
So what I'll do is

00:09:34.830 --> 00:09:38.900
I'll right statement like this, I'll declare
a character pointer

00:09:38.900 --> 00:09:42.150
named C and then I'll use malloc to

00:09:42.150 --> 00:09:45.760
fetch memory to store 3 character
variables.

00:09:45.760 --> 00:09:49.660
In C++, we could have said
something like this, 

00:09:49.660 --> 00:09:52.950
we could have used the new operator and
now

00:09:52.950 --> 00:09:56.770
I'll set the values at
zero index as

00:09:56.770 --> 00:10:00.100
J, one as Q and two
as

00:10:00.100 --> 00:10:03.380
K. So we have created an array on the

00:10:03.380 --> 00:10:06.630
heap and C is a pointer

00:10:06.630 --> 00:10:11.700
to the base address of that array. C is still
a local variable but now it is a

00:10:11.700 --> 00:10:14.900
pointer to character and we can still

00:10:14.900 --> 00:10:19.130
use it like array. The rest of the code
will just work fine. Let us run this code

00:10:19.130 --> 00:10:20.110
and see what happens.

00:10:20.110 --> 00:10:23.970
I have opened the task manager and I'm
running the executable.

00:10:23.970 --> 00:10:27.320
Watch for the memory consumption of
game.exe.

00:10:27.320 --> 00:10:34.320
I will make some bets. As you can see
right now the memory consumption is 348k.

00:10:34.400 --> 00:10:39.260
I just kept on playing and after
some time the memory consumption is 

00:10:39.260 --> 00:10:40.320
488 K.

00:10:40.320 --> 00:10:44.870
It has shot up and if you will
keeping this game further

00:10:44.870 --> 00:10:48.520
after some time it will shoot up again.
Maybe after some time but

00:10:48.520 --> 00:10:51.530
it for shoot up for sure. So why is it
happening.

00:10:51.530 --> 00:10:55.190
Why was it not shooting up when C 
the character array was not

00:10:55.190 --> 00:10:58.580
on not on the heap and it
was under stack. Let's try to

00:10:58.580 --> 00:10:59.230
understand.

00:10:59.230 --> 00:11:02.320
I have drawn sections of applications
memory here,

00:11:02.320 --> 00:11:05.370
and let us now see what really happens
in the memory

00:11:05.370 --> 00:11:09.000
when we are playing a game. As we know
from our previous lessons

00:11:09.000 --> 00:11:12.380
all the information about function
call execution goes into

00:11:12.380 --> 00:11:16.290
the stack section of the memory. Any
time the function is called

00:11:16.290 --> 00:11:20.370
are some amount of memory from the stack
is allocated for its execution.

00:11:20.370 --> 00:11:24.950
When the program starts executing first
the main method is invoked or called.

00:11:24.950 --> 00:11:28.260
So let's say some amount of memory is
allocated for the execution of

00:11:28.260 --> 00:11:32.339
main this is what we call the stack
frame of a function.

00:11:32.339 --> 00:11:35.880
So this is stack frame of main and all the
local variables of main

00:11:35.880 --> 00:11:40.280
will sit inside this stack frame in
our code we had a local variable named

00:11:40.280 --> 00:11:40.820
bet.

00:11:40.820 --> 00:11:44.190
So it will go here and we had a global
variable named

00:11:44.190 --> 00:11:48.250
cash. Initially let's say main
function is executing.

00:11:48.250 --> 00:11:51.770
When we play a game main function makes
multiple calls to

00:11:51.770 --> 00:11:56.030
play function. What really happens when a
function makes calls to another function is

00:11:56.030 --> 00:11:59.610
that. That particular function is
paused and memory is allocated for the

00:11:59.610 --> 00:12:00.680
execution of

00:12:00.680 --> 00:12:05.540
on the called function. So main will pause
and play even start executing and

00:12:05.540 --> 00:12:08.010
play will go on top of main 
in the stack.

00:12:08.010 --> 00:12:12.170
We had a couple of local variables in
play all will go in this stack frame.

00:12:12.170 --> 00:12:15.190
I X Y players guess

00:12:15.190 --> 00:12:18.220
and for the case one when we had the
character

00:12:18.220 --> 00:12:21.250
array C on the stack itself,

00:12:21.250 --> 00:12:24.690
so it was not created using a call to
malloc

00:12:24.690 --> 00:12:27.740
by the character array C will also
sit in this stack frame.

00:12:27.740 --> 00:12:30.760
Now when the execution of play function
will finish,

00:12:30.760 --> 00:12:34.110
control will return back to main and a
memory that was allocated for the

00:12:34.110 --> 00:12:37.339
execution of play function will be
reclaimed.

00:12:37.339 --> 00:12:40.950
Any time function call finishes the
memory that it is allocated on the stack

00:12:40.950 --> 00:12:42.470
is reclaimed.

00:12:42.470 --> 00:12:45.520
So there is one stack frame
corresponding to each call

00:12:45.520 --> 00:12:48.589
and at soon as that call finishers that
memory

00:12:48.589 --> 00:12:52.810
is claimed back and now main will make
another call to play because we will play

00:12:52.810 --> 00:12:53.860
multiple rounds.

00:12:53.860 --> 00:12:58.720
So play will again come into the stack and
it will be cleared again when play finishes.

00:12:58.720 --> 00:13:02.530
As you can see all the local variables get
cleared each time the function call

00:13:02.530 --> 00:13:03.310
finishes.

00:13:03.310 --> 00:13:07.270
For anything on the stack we do not have
to worry about it's deallocation

00:13:07.270 --> 00:13:10.579
it happens automatically when the
function call finishes. Now

00:13:10.579 --> 00:13:13.790
let's talk about the second case when
character array is created on the heap

00:13:13.790 --> 00:13:16.800
using a call to malloc function.

00:13:16.800 --> 00:13:19.750
Once again we will make multiple calls to
play function.

00:13:19.750 --> 00:13:23.610
Now what will happen this time is
that we will not

00:13:23.610 --> 00:13:27.330
create the array on the stack. We will still
have

00:13:27.330 --> 00:13:30.390
are variable named C, a local
variable named C.

00:13:30.390 --> 00:13:34.250
But this variable will not be of type
character array of size 3.

00:13:34.250 --> 00:13:37.450
This variable will be of type pointer to
character

00:13:37.450 --> 00:13:41.540
and we will make a call to malloc function
to create the array on the heap

00:13:41.540 --> 00:13:45.500
and this local variable which is a
pointer to character will only points to

00:13:45.500 --> 00:13:47.100
this particular memory block.

00:13:47.100 --> 00:13:51.510
Anything that is on the heap has to be
accessed through a pointer variable.

00:13:51.510 --> 00:13:56.270
So here we have created the array on the
heap and we have kept only a pointer

00:13:56.270 --> 00:13:57.580
variable on the stack.

00:13:57.580 --> 00:14:01.970
Now when the call to play function will
finish the memory allocated for the

00:14:01.970 --> 00:14:04.200
execution of call to play function

00:14:04.200 --> 00:14:07.670
will be reclaimed so all the local
variables will go away.

00:14:07.670 --> 00:14:12.640
But this memory on the heap the lie
unused and un referenced

00:14:12.640 --> 00:14:16.090
and it will not get deallocated.
Anything on the heap has to be

00:14:16.090 --> 00:14:19.800
explicitly deallocated by making the
call to free function

00:14:19.800 --> 00:14:23.560
or by using a delete operator and
think about it. We will make multiple

00:14:23.560 --> 00:14:25.070
cause to play function

00:14:25.070 --> 00:14:28.620
as we play multiple rounds of our game
and

00:14:28.620 --> 00:14:33.110
each time in each call we will
create one such memory block on the heap

00:14:33.110 --> 00:14:37.060
that will lie unreferenced and unused
when call to

00:14:37.060 --> 00:14:39.130
play function will finish.

00:14:39.130 --> 00:14:42.100
If we will play a game 100 rounds then

00:14:42.100 --> 00:14:46.870
they will have 100 such unreferenced
and unused memory blocks of 3

00:14:46.870 --> 00:14:48.110
characters in the heap.

00:14:48.110 --> 00:14:51.860
heap is not fixed in size and our
application

00:14:51.860 --> 00:14:55.510
can claim can get more memory in the heap
section

00:14:55.510 --> 00:14:58.750
as long as our system itself is not
running out of memory

00:14:58.750 --> 00:15:02.570
and if we are not be allocating and
this unused memory on the heap,

00:15:02.570 --> 00:15:06.620
we are depleting and wasting memory which
is an important resource.

00:15:06.620 --> 00:15:10.100
Our applications memory consumption will
only keep on growing

00:15:10.100 --> 00:15:14.250
with time. Memory leaks are really nasty
bugs to have in your program.

00:15:14.250 --> 00:15:18.000
Anything unused and unreferenced under
heap is

00:15:18.000 --> 00:15:21.360
garbage. In C or C++ we have to make
sure

00:15:21.360 --> 00:15:24.620
as programmers that garbage is not
created on the heap.

00:15:24.620 --> 00:15:28.580
Memory leak is nothing but growth of
garbage in the heap. In languages like Java

00:15:28.580 --> 00:15:33.270
and C#, garbage automatically
cleared from the heap. So programmer does

00:15:33.270 --> 00:15:34.130
not have to worry

00:15:34.130 --> 00:15:38.420
about freeing or deallocating the memory
on heap which is a cool feature to have.

00:15:38.420 --> 00:15:42.240
It avoids memory leak. In this example, we
were creating an array of three

00:15:42.240 --> 00:15:43.380
characters on the heap,

00:15:43.380 --> 00:15:47.399
What if we were creating an array of
10,000 characters and not

00:15:47.399 --> 00:15:51.040
freeing the memory after we were done using
it. At the end of the function

00:15:51.040 --> 00:15:54.839
the memory consumption would have shot
up like anything. Coming back to my

00:15:54.839 --> 00:15:55.570
code here,

00:15:55.570 --> 00:16:00.500
what I have done is I have created a
character array of size ten thousand

00:16:00.500 --> 00:16:04.520
of ten thousand characters here. My
logic would not change.

00:16:04.520 --> 00:16:08.990
I'll just use first three positions in the
array. I'm just trying to

00:16:08.990 --> 00:16:13.050
show you something and ta end of this
particular function when we are done

00:16:13.050 --> 00:16:13.990
using

00:16:13.990 --> 00:16:19.420
this array on the heap. We are making
call to free function,

00:16:19.420 --> 00:16:23.500
passing it the address of this memory
block this array C.

00:16:23.500 --> 00:16:27.600
Our program will just work like before,
but let's from this and monitor the

00:16:27.600 --> 00:16:29.110
memory consumption once again.

00:16:29.110 --> 00:16:33.089
Once again I'm showing you that task
manager and I am playing the game

00:16:33.089 --> 00:16:38.459
let's make some bets. Now watch out
the memory consumption of game.exe.

00:16:38.459 --> 00:16:42.579
For howsoever long you will play the
game

00:16:42.579 --> 00:16:46.910
the memory consumption wont shoot up. As
you can see it's

00:16:46.910 --> 00:16:50.620
356 K and it's not shooting up for me

00:16:50.620 --> 00:16:55.480
even after playing for a long time, and
it is not shooting up because

00:16:55.480 --> 00:16:58.800
we had used free 

00:16:58.800 --> 00:17:03.920
to deallocate the memory when we were
done using it at the end of the function.

00:17:03.920 --> 00:17:07.480
Remember we had created an array of
size ten thousand

00:17:07.480 --> 00:17:11.850
and if we were not using free then the
memory would have shot up like

00:17:11.850 --> 00:17:15.040
anything. The memory consumption would
have shot up like anything.

00:17:15.040 --> 00:17:18.449
but because we are freeing at the end
of the function

00:17:18.449 --> 00:17:23.559
it's not going up there is no memory
leak. So finally to summarize it,

00:17:23.559 --> 00:17:27.010
memory leak is improper use of dynamic
memory

00:17:27.010 --> 00:17:31.090
or the heap section of memory that
causes the memory consumption of our

00:17:31.090 --> 00:17:31.800
program

00:17:31.800 --> 00:17:36.120
to increase over a period of time.
Remember memory leak always happens

00:17:36.120 --> 00:17:37.050
because of

00:17:37.050 --> 00:17:41.400
unused and unreferenced memory
blocks in the heap. Anything on the stack

00:17:41.400 --> 00:17:45.559
is deallocated automatically and
stack is all is fixed in size.

00:17:45.559 --> 00:17:49.130
At the most we can have an overflow
in stack.

00:17:49.130 --> 00:17:52.300
So this was memory leak in C C++.

00:17:52.300 --> 00:17:53.070
Thanks for watching.

