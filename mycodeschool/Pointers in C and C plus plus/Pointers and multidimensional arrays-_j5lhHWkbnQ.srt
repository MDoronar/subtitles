0
00:00:00,440 --> 00:00:04,620
En nuestra lección anterior, vimos cómo 
podemos

1
00:00:04,620 --> 00:00:05,440
trabajar con matrices de dos dimensiones 
utilizando punteros.

2
00:00:05,440 --> 00:00:08,740
Ahora en esta lección, vamos a ver

3
00:00:08,740 --> 00:00:12,469
cómo podemos trabajar con matrices de 
dimensiones

4
00:00:12,469 --> 00:00:17,640
más altas como tres matrices 
tridimensionales utilizando punteros. 
También vamos a ver cómo podemos pasar 
matrices multidimensionales como

5
00:00:17,640 --> 00:00:20,760
argumentos de funciones, ya que esa es una 
situación en

6
00:00:20,760 --> 00:00:24,060
la que una vez más punteros entrarán en la 
imagen.

7
00:00:24,060 --> 00:00:28,039
Voy a comenzar con un resumen rápido de lo 
que hemos discutido en la lección anterior.

8
00:00:28,039 --> 00:00:32,349
Cada vez que se crea una matriz 
multi-dimensional y Retomemos el

9
00:00:32,349 --> 00:00:35,570
ejemplo de matriz bidimensional que había 
creado en la lección anterior.

10
00:00:35,570 --> 00:00:38,739
Hay que pensar en la

11
00:00:38,739 --> 00:00:41,910
matriz multidimensional como matriz de 
matrices. Matriz básicamente es una colección

12
00:00:41,910 --> 00:00:45,370
de cosas similares de objetos

13
00:00:45,370 --> 00:00:48,760
similares, por lo que una

14
00:00:48,760 --> 00:00:52,190
matriz multi-dimensional es básicamente un 
conjunto de matrices. Esta matriz B que aquí 
hay una colección

15
00:00:52,190 --> 00:00:57,390
de matrices unidimensionales de 3 elementos 
cada uno.

16
00:00:57,390 --> 00:01:00,840
Tenemos 2 arreglos 1-dimensionales

17
00:01:00,840 --> 00:01:04,100
de 3 elementos cada uno. Lo que he tratado 
de mostrar en esta figura

18
00:01:04,100 --> 00:01:08,020
es cómo se organizará serie B en la memoria. 
He asumido que la dirección de

19
00:01:08,020 --> 00:01:13,260
partida de la matriz es 400. Cada célula 
almacenar un número entero

20
00:01:13,260 --> 00:01:18,290
aquí es un bloque de cuatro bytes. Como 
sabemos cada byte en la

21
00:01:18,290 --> 00:01:18,970
memoria de los ordenadores tiene una 
dirección.

22
00:01:18,970 --> 00:01:22,659
No estoy dibujando todos los bytes, 
partición para todos los bytes

23
00:01:22,659 --> 00:01:27,580
que estoy bloques de 4 bytes cada dibujo y 
es por

24
00:01:27,580 --> 00:01:28,430
eso que estoy escribiendo sólo la dirección 
de inicio de cada bloque.

25
00:01:28,430 --> 00:01:32,390
Se puede imaginar un bloque de 4 bytes o 
menos así.

26
00:01:32,390 --> 00:01:35,759
La dirección inicial es 400. Digamos que 
cada partición aquí es de 1

27
00:01:35,759 --> 00:01:40,329
byte por lo que el siguiente byte tiene

28
00:01:40,329 --> 00:01:44,170
la dirección 401 y el próximo 1 tiene

29
00:01:44,170 --> 00:01:45,420
la dirección 403 y el siguiente tiene una 
dirección de 403.

30
00:01:45,420 --> 00:01:49,149
En general, este primer bloque de 12

31
00:01:49,149 --> 00:01:54,509
bytes que contiene estos tres enteros 2,

32
00:01:54,509 --> 00:01:55,340
3 y 6, que muestra en amarillo

33
00:01:55,340 --> 00:01:59,079
aquí es mi primera matriz unidimensional que

34
00:01:59,079 --> 00:02:02,329
puedo llamar B [0] y el próximo

35
00:02:02,329 --> 00:02:05,640
bloque de 12 bytes es mi segunda

36
00:02:05,640 --> 00:02:10,869
matriz unidimensional de tres enteros que 
puedo llamar B [1]. Así que tenemos dos 
matrices unidimensionales en nuestra 
colección.

37
00:02:10,869 --> 00:02:13,970
Tenemos dos colecciones de tres enteros cada

38
00:02:13,970 --> 00:02:18,450
uno en nuestra colección y todo está

39
00:02:18,450 --> 00:02:19,000
organizado en un bloque contiguo de memoria.

40
00:02:19,000 --> 00:02:22,160
Ahora vamos a ver esto, B [0]

41
00:02:22,160 --> 00:02:26,080
es de hasta 400 bytes de dirección 411.

42
00:02:26,080 --> 00:02:29,730
Tenemos tres enteros y tenemos cuatro bytes 
para cada entero.

43
00:02:29,730 --> 00:02:35,209
El primer entero que podemos acceder como 
elemento en el índice

44
00:02:35,209 --> 00:02:39,239
cero de B [0] está tomando cuatro bytes que 
comienzan dirección 400.

45
00:02:39,239 --> 00:02:42,870
El siguiente número entero que se puede 
acceder como

46
00:02:42,870 --> 00:02:46,110
B [0] [1], el segundo elemento de B [0]

47
00:02:46,110 --> 00:02:49,140
se llevará a cuatro bytes siguientes a 
partir 404

48
00:02:49,140 --> 00:02:52,430
y la próxima será B [0] [2] elemento en

49
00:02:52,430 --> 00:02:55,500
el índice 2 de B [ 0] y del

50
00:02:55,500 --> 00:02:58,920
mismo modo tendremos 4 bytes para el 
elemento cero

51
00:02:58,920 --> 00:03:02,239
de B [1], 4 bytes para el segundo elemento

52
00:03:02,239 --> 00:03:06,920
y 4 bytes para el elemento en el índice 2 de 
B [1].

53
00:03:06,920 --> 00:03:11,019
Como habíamos visto en nuestra lección 
anterior, cuando sólo

54
00:03:11,019 --> 00:03:14,909
se utiliza para el nombre de la matriz 
entonces

55
00:03:14,909 --> 00:03:18,360
se vuelve como un puntero al primer elemento 
de la matriz. Aquí B es una

56
00:03:18,360 --> 00:03:24,000
matriz de dos dimensiones. Es un conjunto de 
matrices unidimensionales de tamaño 3.

57
00:03:24,000 --> 00:03:27,659
Así que, básicamente, B nos devolverá un 
puntero

58
00:03:27,659 --> 00:03:31,930
a una sola dimensión matriz de tres 
elementos,

59
00:03:31,930 --> 00:03:33,260
puntero a una matriz unidimensional de tres 
enteros.

60
00:03:33,260 --> 00:03:37,580
En esta declaración, he declarado una 
variable que

61
00:03:37,580 --> 00:03:38,409
es puntero a 1 gama dimensional de 3

62
00:03:38,409 --> 00:03:41,760
enteros y el nombre de la variable es P.

63
00:03:41,760 --> 00:03:46,260
Una declaración de este tipo es bien. Una 
declaración como esta no va

64
00:03:46,260 --> 00:03:47,080
a estar bien porque B no

65
00:03:47,080 --> 00:03:51,090
devolverá un puntero a un entero. B 
devolverá un

66
00:03:51,090 --> 00:03:51,980
puntero a unidimensional

67
00:03:51,980 --> 00:03:57,049
matriz de tres números enteros. Ahora estoy 
va a escribir declaraciones 3 de impresión

68
00:03:57,049 --> 00:03:58,090
que yo también había escrito en nuestra 
lección anterior.

69
00:03:58,090 --> 00:04:02,439
No estoy escribiendo la sintaxis completa de 
printf. Bueno por lo que una vez más

70
00:04:02,439 --> 00:04:04,010
lo que necesita para decirme lo que

71
00:04:04,010 --> 00:04:07,580
será la salida si queremos imprimir estas 
tres expresiones.

72
00:04:07,580 --> 00:04:10,810
Tenemos B, B y B * [0].

73
00:04:10,810 --> 00:04:14,920
Bueno para todos estos tres, la salida será 
cuatrocientos.

74
00:04:14,920 --> 00:04:19,220
Aquí cuando decimos B, simplemente usando el

75
00:04:19,220 --> 00:04:23,229
nombre de la matriz B volverá como

76
00:04:23,229 --> 00:04:27,419
un puntero a la primera matriz 
unidimensional en B. El tipo de una variable 
puntero es relevante sólo cuando

77
00:04:27,419 --> 00:04:31,449
estamos tratando de eliminar la referencia o 
realizar aritmética de punteros.

78
00:04:31,449 --> 00:04:34,710
Pero si se acaba de tratar de imprimir la 
dirección

79
00:04:34,710 --> 00:04:38,150
almacenada en la variable puntero que será 
la dirección de

80
00:04:38,150 --> 00:04:42,090
partida, la dirección del primer byte de un 
bloque de memoria.

81
00:04:42,090 --> 00:04:45,259
Así que si tenemos un puntero a

82
00:04:45,259 --> 00:04:46,830
esta matriz unidimensional que está 
almacenando 2,

83
00:04:46,830 --> 00:04:51,600
3 y 6 a continuación su dirección es 400. 
Ahora, cuando hicimos un * B que es igual

84
00:04:51,600 --> 00:04:55,820
que la B [0], se eliminan las referencias y

85
00:04:55,820 --> 00:04:59,280
ahora tenemos la completa unidimensional en 
la matriz B [0].

86
00:04:59,280 --> 00:05:03,650
Ahora si uso B [0] porque B [0] es una matriz

87
00:05:03,650 --> 00:05:07,740
unidimensional, vamos a llegar a puntero al 
primer entero en B [0].

88
00:05:07,740 --> 00:05:10,889
Así que vamos a obtener un puntero a B [0] 
[0].

89
00:05:10,889 --> 00:05:14,460
Este bloque de 4 bytes que comienzan 
dirección 400.

90
00:05:14,460 --> 00:05:18,100
Una vez más, si nos acaba de imprimir la

91
00:05:18,100 --> 00:05:21,229
dirección, a continuación, la dirección 
inicial de este bloque

92
00:05:21,229 --> 00:05:24,530
es de 400 es por eso que la salida es 400. 
Incluso si iba a

93
00:05:24,530 --> 00:05:27,710
imprimir & B [0]

94
00:05:27,710 --> 00:05:33,400
[0] de salida será 400. B * y B son ambos 
nos regresando punteros. La diferencia es 
que B está

95
00:05:33,400 --> 00:05:37,690
regresando puntero a una matriz 
unidimensional

96
00:05:37,690 --> 00:05:41,090
de tres enteros, mientras que *

97
00:05:41,090 --> 00:05:44,560
B está regresando puntero a un entero. 
Cuando se nos acaba la impresión de la 
dirección, estos dos

98
00:05:44,560 --> 00:05:48,560
objetos de la matriz de una dimensión 
completa de B [0]

99
00:05:48,560 --> 00:05:52,479
y el primer elemento en B [0] tiene la misma 
dirección

100
00:05:52,479 --> 00:05:54,110
de partida por lo que se imprime la misma 
dirección inicial.

101
00:05:54,110 --> 00:05:57,919
El tipo de juego de roles puntero

102
00:05:57,919 --> 00:05:58,949
cuando se intenta eliminar la referencia o

103
00:05:58,949 --> 00:06:03,330
cuando intenta realizar la aritmética de 
punteros. También habíamos visto en la 
lección anterior

104
00:06:03,330 --> 00:06:06,979
que B [i] [j] puede ser de

105
00:06:06,979 --> 00:06:11,270
vuelta como * (B [i] + J). Si B [i] para un 
cierto valor de I es

106
00:06:11,270 --> 00:06:16,169
una matriz unidimensional entonces B [i] nos 
dará un puntero

107
00:06:16,169 --> 00:06:20,699
entero, nos devolverá un puntero entero en 
el primer entero

108
00:06:20,699 --> 00:06:24,210
en B [i] a continuación, añadir j es, 
básicamente, llevando

109
00:06:24,210 --> 00:06:27,729
a cabo la aritmética de punteros y obtener 
un puntero

110
00:06:27,729 --> 00:06:31,000
al número entero en el índice j en una 
dimensión

111
00:06:31,000 --> 00:06:35,500
B [i] y, finalmente, esta eliminación de 
referencias es conseguir que el valor de 
número entero.

112
00:06:35,500 --> 00:06:38,630
Una vez más B [i] se

113
00:06:38,630 --> 00:06:41,949
puede escribir como * (B + i).

114
00:06:41,949 --> 00:06:46,380
B es puntero matriz unidimensional de 3 
enteros. Por lo tanto (B + I)

115
00:06:46,380 --> 00:06:47,020
también volverán nos puntero a 1

116
00:06:47,020 --> 00:06:50,650
gama dimensional de 3 enteros y

117
00:06:50,650 --> 00:06:52,449
eliminación de referencias a este 
desreferenciar

118
00:06:52,449 --> 00:06:57,039
particular, nos darán la matriz bidimensional

119
00:06:57,039 --> 00:06:58,199
1 y el nombre de la

120
00:06:58,199 --> 00:07:01,650
matriz unidimensional nos devuelve puntero 
al primer elemento de la matriz. Así que 
esta vez será

121
00:07:01,650 --> 00:07:07,509
de nuevo puntero a entero. Por ahora, si 
usted entiende claramente cómo toda la

122
00:07:07,509 --> 00:07:11,169
aritmética de punteros y eliminación de 
referencias que está

123
00:07:11,169 --> 00:07:14,740
sucediendo en estas expresiones, entonces no 
es muy difícil

124
00:07:14,740 --> 00:07:18,080
de entender cómo serán las cosas para decir, 
matriz tridimensional.

125
00:07:18,080 --> 00:07:21,349
Ahora digamos que hemos

126
00:07:21,349 --> 00:07:26,090
creado un tridimensional llamado C. Tenemos 
un conjunto de 3 x 2 x 2.

127
00:07:26,090 --> 00:07:31,020
A tres matriz bidimensional es, básicamente, 
una

128
00:07:31,020 --> 00:07:32,300
matriz o colección de conjuntos de dos 
dimensiones.

129
00:07:32,300 --> 00:07:37,690
Así que si tengo que mostrar C en la 
memoria. Voy a mostrar que algo como esto.

130
00:07:37,690 --> 00:07:41,280
He asumido que la dirección de partida

131
00:07:41,280 --> 00:07:45,110
de C es la dirección del byte 800. Los 
primeros 16 bytes de la dirección inicial

132
00:07:45,110 --> 00:07:49,069
de 800, es mi primera matriz de dos 
dimensiones.

133
00:07:49,069 --> 00:07:52,360
Estoy asumiendo que cada entero tendrá 
cuatro bytes

134
00:07:52,360 --> 00:07:55,960
por lo que todas las células en amarillo

135
00:07:55,960 --> 00:07:59,560
son parte de la matriz de dos dimensiones. 
El siguiente bloque de 16 bytes

136
00:07:59,560 --> 00:08:03,419
que comienzan dirección es C 816

137
00:08:03,419 --> 00:08:07,620
[1] y el siguiente bloque de

138
00:08:07,620 --> 00:08:11,610
16 bytes que comienzan 832 es C [2]. Podemos 
romper más abajo en

139
00:08:11,610 --> 00:08:16,250
las matrices bidimensionales en matrices 
unidimensionales. Los dos primeros números 
enteros en C [0] son

140
00:08:16,250 --> 00:08:20,360
​​parte de la primera matriz unidimensional 
C [0] [0],

141
00:08:20,360 --> 00:08:23,970
y 7 y 9 una parte de C [0] [1].

142
00:08:23,970 --> 00:08:27,509
El primer entero en C [0]

143
00:08:27,509 --> 00:08:30,789
[0] se puede acceder como C

144
00:08:30,789 --> 00:08:34,430
[0] [0] [0] y podemos seguir así. Bien, una 
vez más vamos

145
00:08:34,430 --> 00:08:38,039
a jugar el mismo juego. Voy a imprimir 
extractos y

146
00:08:38,039 --> 00:08:42,029
tiene que adivinar la salida. Esta vez sólo 
con el nombre

147
00:08:42,029 --> 00:08:45,100
de la matriz C nos dará

148
00:08:45,100 --> 00:08:48,190
un puntero a la matriz bidimensional

149
00:08:48,190 --> 00:08:51,769
de números enteros de tamaño 2 x 2.

150
00:08:51,769 --> 00:08:55,089
Por lo que podemos escribir una declaración 
como esta. He declarado un puntero a

151
00:08:55,089 --> 00:08:58,470
matriz bidimensional de enteros de

152
00:08:58,470 --> 00:09:02,459
tamaño 2 x 2 aquí. El nombre del puntero es 
P.

153
00:09:02,459 --> 00:09:05,910
Si me acaba de imprimir P o C

154
00:09:05,910 --> 00:09:09,089
aquí y no estoy leyendo la sentencia printf

155
00:09:09,089 --> 00:09:12,260
completa, una vez más mi salida será 800. 
Ahora bien, si voy a realizar están la

156
00:09:12,260 --> 00:09:15,339
eliminación de referencias y tratar de 
imprimir *

157
00:09:15,339 --> 00:09:18,830
C, entonces este será el mismo que C

158
00:09:18,830 --> 00:09:23,110
[0] y C [0] es una matriz de dos dimensiones.

159
00:09:23,110 --> 00:09:26,930
Así que vamos a obtener un puntero al primer 
elemento en C [0].

160
00:09:26,930 --> 00:09:30,790
Todas estas expresiones están regresando

161
00:09:30,790 --> 00:09:34,769
nos puntero al mover una

162
00:09:34,769 --> 00:09:38,100
matriz bidimensional de enteros de

163
00:09:38,100 --> 00:09:42,399
tamaño 2 y la dirección impresa será 800. 
Recuerde C es de tipo puntero a

164
00:09:42,399 --> 00:09:45,830
la matriz 2D de 2 x 2

165
00:09:45,830 --> 00:09:50,550
y eliminación de referencias vez nos está

166
00:09:50,550 --> 00:09:55,750
dando puntero a una matriz unidimensional de 
dos enteros. C nos está volviendo puntero

167
00:09:55,750 --> 00:09:56,730
a matriz bidimensional de enteros.

168
00:09:56,730 --> 00:10:01,800
en sí C es una matriz. Hay diferencia entre 
los dos tipos.

169
00:10:01,800 --> 00:10:05,100
Está bien para C, C [i] [j] [k],

170
00:10:05,100 --> 00:10:09,570
donde i, j, k son algunos índices se

171
00:10:09,570 --> 00:10:12,720
puede escribir como * (C [i] [j] +

172
00:10:12,720 --> 00:10:16,380
k) y ahora, una vez más, podemos escribir

173
00:10:16,380 --> 00:10:20,310
C [i ] [j] como * (C [i]

174
00:10:20,310 --> 00:10:23,399
+ j), y la expresión general se verá

175
00:10:23,399 --> 00:10:26,500
algo como esto y podemos seguir adelante y

176
00:10:26,500 --> 00:10:30,610
escribir C [i] como * (C + i).

177
00:10:30,610 --> 00:10:34,459
Si usted es capaz de entender cómo tuve que 
conducir

178
00:10:34,459 --> 00:10:35,899
estas expresiones, si usted es capaz de 
entender toda la

179
00:10:35,899 --> 00:10:40,350
aritmética de punteros y eliminación de 
referencias en estas expresiones

180
00:10:40,350 --> 00:10:44,750
y luego usted es bueno trabajar con matrices 
tridimensionales utilizando punteros.

181
00:10:44,750 --> 00:10:48,720
Quiero una respuesta rápida para éste. ¿Cuál 
será el resultado

182
00:10:48,720 --> 00:10:51,740
de este comunicado de impresión?

183
00:10:51,740 --> 00:10:55,350
Bien C [0] [1] significa que vamos a esta 
matrices

184
00:10:55,350 --> 00:10:59,360
unidimensionales que tiene estos 2 elementos 
7 y 9 y

185
00:10:59,360 --> 00:11:04,130
cuando estamos usando nombre de la matriz C 
[0] [1]

186
00:11:04,130 --> 00:11:08,370
que estamos consiguiendo un puntero al 
primer entero en esta matriz unidimensional.

187
00:11:08,370 --> 00:11:12,000
Puntero a este entero 7, añadiendo 1 que 
estamos haciendo

188
00:11:12,000 --> 00:11:16,690
aritmética de punteros a un puntero entero 
para que vayan

189
00:11:16,690 --> 00:11:21,200
a nueve y eliminación de referencias nos 
dará entero 9.

190
00:11:21,200 --> 00:11:25,980
De hecho, esta expresión es el mismo que C 
[0] [1] [1].

191
00:11:25,980 --> 00:11:30,910
Ahora ¿cuál será el resultado de este 
comunicado de impresión * (C [1] 1).

192
00:11:30,910 --> 00:11:35,029
C [1] nos devolverá un puntero a una matriz 
unidimensional.

193
00:11:35,029 --> 00:11:38,450
La primera matriz unidimensional en C [1], 
este

194
00:11:38,450 --> 00:11:43,399
bloque que contiene números enteros 3 y 4. 
Añadiendo 1 está realizando la aritmética de

195
00:11:43,399 --> 00:11:47,120
punteros e ir a la siguiente matriz 
unidimensional.

196
00:11:47,120 --> 00:11:50,500
Va a esta matriz unidimensional que contiene 
de

197
00:11:50,500 --> 00:11:54,730
6 a 1, y ahora dereferencing es básicamente

198
00:11:54,730 --> 00:11:58,149
obtener la matriz unidimensional del puntero 
y si

199
00:11:58,149 --> 00:12:01,709
acaba de utilizar un nombre de la matriz

200
00:12:01,709 --> 00:12:06,070
unidimensional, se obtiene un puntero al 
primer elemento matriz unidimensional.

201
00:12:06,070 --> 00:12:09,510
Así que vamos a obtener un puntero este 
entero 6.

202
00:12:09,510 --> 00:12:12,800
La salida será 824.

203
00:12:12,800 --> 00:12:16,100
Este bloque de 4 bytes de almacenamiento de

204
00:12:16,100 --> 00:12:19,290
dirección de almacenamiento de número entero 
3 es 816. A continuación sería la próxima 
será a

205
00:12:19,290 --> 00:12:22,920
las 20 y el próximo será un 24.

206
00:12:22,920 --> 00:12:26,860
Podemos probar estas expresiones en el 
programa real.

207
00:12:26,860 --> 00:12:30,240
Estoy escribiendo este programa C simple. He 
creado esta

208
00:12:30,240 --> 00:12:33,470
matriz tridimensional C. Los datos de 
rellenado es el

209
00:12:33,470 --> 00:12:38,220
mismo que nos mostramos en el ejemplo. En la 
primera sentencia printf,

210
00:12:38,220 --> 00:12:38,829
estoy escribiendo, estoy tratando de

211
00:12:38,829 --> 00:12:42,130
imprimir C, C * C

212
00:12:42,130 --> 00:12:46,709
[0] y & C [0] [0]. Todos estos son punteros y

213
00:12:46,709 --> 00:12:50,200
si me acaba de utilizar

214
00:12:50,200 --> 00:12:54,279
la dirección% d saldría impreso. Cuando 
estoy de ejecutar este código, como se puede

215
00:12:54,279 --> 00:12:58,839
ver la salida lejos de todas estas 
expresiones es igual.

216
00:12:58,839 --> 00:13:02,579
Cualquier conjetura de lo que será la salida 
para esta impresión sentencia if.

217
00:13:02,579 --> 00:13:06,649
Esta expresión es más que C [0] [0] [1].

218
00:13:06,649 --> 00:13:09,850
La salida para el primer printf es diferente 
porque

219
00:13:09,850 --> 00:13:12,950
se trata de una carrera diferente del 
programa y

220
00:13:12,950 --> 00:13:16,639
en cada serie, la dirección firmado 
cambiaría pero cualquiera

221
00:13:16,639 --> 00:13:21,240
que sea la dirección es que será visto por 
estos para expresiones.

222
00:13:21,240 --> 00:13:24,410
Yo recomendaría probar todas las diferentes 
expresiones que fueron

223
00:13:24,410 --> 00:13:28,940
decodificación anteriormente en un programa 
real de esta manera.

224
00:13:28,940 --> 00:13:33,160
Vale la siguiente cosa que quiero hablar es

225
00:13:33,160 --> 00:13:36,800
de pasar matriz multidimensional como 
argumentos de la función.

226
00:13:36,800 --> 00:13:41,040
Voy a declarar una función y dejar

227
00:13:41,040 --> 00:13:44,610
de nombrar esta función Func y quiero

228
00:13:44,610 --> 00:13:49,579
esta función para aceptar una matriz 
tridimensional como argumento.

229
00:13:49,579 --> 00:13:54,300
Entonces qué hago. Si quería una matriz 
unidimensional como argumento,

230
00:13:54,300 --> 00:13:57,310
que podría haber dado algo como esto. Pero 
como habíamos discutido en una

231
00:13:57,310 --> 00:14:01,370
de las lecciones anteriores, esta sintaxis

232
00:14:01,370 --> 00:14:05,290
es solamente un azúcar sintáctico se

233
00:14:05,290 --> 00:14:08,649
interpreta como éste por el compilador. Una 
nueva copia del array no

234
00:14:08,649 --> 00:14:11,959
se crea para la llamada de función. Sólo se 
crea una

235
00:14:11,959 --> 00:14:15,100
referencia a él en

236
00:14:15,100 --> 00:14:18,620
la forma de un puntero. Así que ahora si en 
la función principal, tengo

237
00:14:18,620 --> 00:14:22,040
una matriz de una matriz unidimensional como 
esto y

238
00:14:22,040 --> 00:14:26,000
digamos que el tipo de retorno de esta 
función es nula.

239
00:14:26,000 --> 00:14:29,329
Puedo hacer una llamada a la función pasando

240
00:14:29,329 --> 00:14:32,690
B como esto y esto va a estar bien. Ahora 
digamos que declaramos 2 matriz

241
00:14:32,690 --> 00:14:35,790
bidimensional de 2 x 3 y

242
00:14:35,790 --> 00:14:39,060
ahora la queremos esta función para

243
00:14:39,060 --> 00:14:42,839
recibir a tomar una matriz bidimensional 
como argumento.

244
00:14:42,839 --> 00:14:45,990
Ahora bien, como hemos comentado, un 
regresará nos

245
00:14:45,990 --> 00:14:49,560
puntero a un entero pero B nos un

246
00:14:49,560 --> 00:14:53,800
puntero al conjunto de tres números enteros, 
unidimensional

247
00:14:53,800 --> 00:14:59,060
serie de tres números enteros para esta 
definición particular de B.

248
00:14:59,060 --> 00:15:02,180
Así que para la función de

249
00:15:02,180 --> 00:15:06,970
tomar esta matriz B como argumento. 
Definición debería ser algo como esto. El 
argumento debe

250
00:15:06,970 --> 00:15:08,709
ser algo como esto.

251
00:15:08,709 --> 00:15:11,889
O bien podemos escribir o

252
00:15:11,889 --> 00:15:16,050
podemos escribir algo como esto. Sólo la 
primera dimensión se puede dejar vacío. La 
otra dimensión se

253
00:15:16,050 --> 00:15:18,240
tiene que especificar, y

254
00:15:18,240 --> 00:15:21,550
ahora puede pasar B. Hay algo

255
00:15:21,550 --> 00:15:25,470
interesante aquí. Si yo anunciare una

256
00:15:25,470 --> 00:15:26,540
matriz bidimensional algo como esto. Digamos 
Declaro dos

257
00:15:26,540 --> 00:15:29,720
dimensiones matriz X

258
00:15:29,720 --> 00:15:32,769
de 2 x 4. Ahora no puedo pasar a la

259
00:15:32,769 --> 00:15:37,870
función X porque X volverá puntero

260
00:15:37,870 --> 00:15:39,269
a una matriz unidimensional de 4

261
00:15:39,269 --> 00:15:43,470
maestros mientras esta función se supone

262
00:15:43,470 --> 00:15:44,570
que debe recibir matriz unidimensional de 3 
enteros.

263
00:15:44,570 --> 00:15:48,430
Si X se define algo como esto dimensión de

264
00:15:48,430 --> 00:15:51,459
5 x 3 a continuación, pasar X está muy bien.

265
00:15:51,459 --> 00:15:55,040
Ahora bien, si queremos pasar esta matriz 
tridimensional, a continuación, una

266
00:15:55,040 --> 00:15:59,620
vez más tenemos que ver qué tipos de puntero 
volverá C.

267
00:15:59,620 --> 00:16:05,190
Así que, básicamente devolverá un puntero a 
la

268
00:16:05,190 --> 00:16:07,079
matriz de dos dimensiones de 2 x 2,

269
00:16:07,079 --> 00:16:10,410
de modo que podemos utilizar una sintaxis 
como

270
00:16:10,410 --> 00:16:14,070
esta o algo así, y entonces podemos pasar a 
C.

271
00:16:14,070 --> 00:16:17,079
Así es cómo las cosas van a

272
00:16:17,079 --> 00:16:20,170
ser para cualquier matriz multi-dimensional, 
excepto la

273
00:16:20,170 --> 00:16:23,480
primera dimensión, se harán cumplir todas 
las demás dimensiones.

274
00:16:23,480 --> 00:16:27,740
Un error común que la gente hace es, para una

275
00:16:27,740 --> 00:16:30,880
matriz de dos dimensiones que tratan de usar 
el puntero

276
00:16:30,880 --> 00:16:35,180
a puntero algo como esto y para una matriz 
tridimensional

277
00:16:35,180 --> 00:16:39,670
que tratan de usar algo como esto que acaba 
de costumbre trabajo. Así que esto es más o 
menos lo

278
00:16:39,670 --> 00:16:43,240
que queríamos hablar de punteros y matrices 
multidimensionales. Gracias por ver.

