WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:03.070
The concept of pointers and arrays

00:00:03.070 --> 00:00:06.100
in C or C++ go together.

00:00:06.100 --> 00:00:09.590
There is a very strong relationship 
between these two concepts

00:00:09.590 --> 00:00:12.889
and in this lesson we will be 
discussing this relationship.

00:00:12.889 --> 00:00:16.730
When we declare an array. Let's say we
declare

00:00:16.730 --> 00:00:20.279
an integer array A of size 5.

00:00:20.279 --> 00:00:23.970
Then we create 5 integer variables named

00:00:23.970 --> 00:00:27.939
A[0], A[1], A[2], A[3] and A[4].

00:00:27.939 --> 00:00:32.590
And now these five integers will be stored in the memory as a block

00:00:32.590 --> 00:00:33.180
of

00:00:33.180 --> 00:00:36.719
five consecutive integers. Something like 
this.

00:00:36.719 --> 00:00:40.820
What we are showing here in the right is
A0 or the first element in the

00:00:40.820 --> 00:00:41.570
array

00:00:41.570 --> 00:00:44.950
stored at address 200 and

00:00:44.950 --> 00:00:48.940
in a typical compile modern day 
compiler integer is stored in four bytes

00:00:48.940 --> 00:00:53.930
so A1 will be four bytes ahead of A0 at 204

00:00:53.930 --> 00:00:57.129
and A2 will be at 208, A3 will be at 212

00:00:57.129 --> 00:01:00.190
A4 will be at 216.

00:01:00.190 --> 00:01:05.070
The overall size of array will be 20
bytes and these 20 bytes

00:01:05.070 --> 00:01:10.850
will be one consecutive block. We are only
showing the section of the memory in

00:01:10.850 --> 00:01:11.590
which A is

00:01:11.590 --> 00:01:14.630
stored. Sometimes we also show the 
memory

00:01:14.630 --> 00:01:18.590
horizontally something like this from 
left to right.

00:01:18.590 --> 00:01:21.979
We increase the address but these two 
representations are just

00:01:21.979 --> 00:01:25.860
for the sake of understanding. Let's use 
the horizontal representation of the

00:01:25.860 --> 00:01:26.360
memory

00:01:26.360 --> 00:01:30.960
this time. I will show this memory a little 
more extending towards

00:01:30.960 --> 00:01:34.170
the right so that I can accommodate a 
couple of more variables.

00:01:34.170 --> 00:01:37.439
Let's say apart from this integer Array A

00:01:37.439 --> 00:01:40.439
I have an integer variable

00:01:40.439 --> 00:01:44.090
X and its value is 5. And let's say

00:01:44.090 --> 00:01:48.750
X is located at address 300 now.

00:01:48.750 --> 00:01:51.850
Let's say I have a pointer to integer P

00:01:51.850 --> 00:01:55.240
and in P I store address of

00:01:55.240 --> 00:01:58.460
X. If we print P

00:01:58.460 --> 00:02:03.689
then the value and P would be 300 so 
this statement will print

00:02:03.689 --> 00:02:07.680
300 and if we dereference P

00:02:07.680 --> 00:02:12.980
and try to bring the address stored in, try 
to print the value stored

00:02:12.980 --> 00:02:16.690
in this location P in the value would 
be

00:02:16.690 --> 00:02:21.150
Five this is fine. Nut we also know that
we can do

00:02:21.150 --> 00:02:24.430
an operation. Something like increment and decrement

00:02:24.430 --> 00:02:28.700
a pointer variable by a constant. So we 
can do something like P equal

00:02:28.700 --> 00:02:32.920
the P Plus one and this will take us to
the address of the next integer.

00:02:32.920 --> 00:02:37.950
And because integer is four bytes so 
now P would be 304

00:02:37.950 --> 00:02:43.120
so if I want to print p now then the 
output should be 304, but

00:02:43.120 --> 00:02:46.319
if we try to dereference P now and try to print

00:02:46.319 --> 00:02:50.160
*p then we do not know the value 
at this address

00:02:50.160 --> 00:02:53.300
so we cannot say what will be printed.
It's like

00:02:53.300 --> 00:02:58.090
we know that Mr X lives at address 300 
but we do not know

00:02:58.090 --> 00:03:02.870
who is his neighbor who lives at address
304.

00:03:02.870 --> 00:03:07.540
But for this integer Array A let us say I'm 
writing this same integer array in the

00:03:07.540 --> 00:03:08.099
right here

00:03:08.099 --> 00:03:13.459
which is located at address 200 if I declare a pointer to integer

00:03:13.459 --> 00:03:18.579
P and store the address of the first
element

00:03:18.579 --> 00:03:21.920
by putting an ampersand operator in
front of A[0]

00:03:21.920 --> 00:03:25.180
then printing P would give us

00:03:25.180 --> 00:03:29.349
in this scenario the output 200 and 
printing

00:03:29.349 --> 00:03:33.370
*P would give us. But before 
that lets

00:03:33.370 --> 00:03:37.659
say we have these values in the array. 
Let's fill up some values in the array

00:03:37.659 --> 00:03:40.959
so

00:03:40.959 --> 00:03:45.849
*P would be 2 and if I want to print

00:03:45.849 --> 00:03:49.859
P plus one then the address would be

00:03:49.859 --> 00:03:56.600
204 and if I dereference P+1 and try to
bring this value then

00:03:56.650 --> 00:03:59.900
print this value it will be Four and similarly if we 
wanted

00:03:59.900 --> 00:04:03.599
the third element in the array we could do 
a P plus 2.

00:04:03.599 --> 00:04:08.060
here. So using pointer arithmetic 
make sense in the case of

00:04:08.060 --> 00:04:11.680
pointers because in the case arrays 
because we know what

00:04:11.680 --> 00:04:16.340
is in the adjacent location. There is 
one more property of array

00:04:16.340 --> 00:04:19.620
if we just use the name of the Array A

00:04:19.620 --> 00:04:23.860
then A gives us the pointer to the 
first element in the array. So we can write

00:04:23.860 --> 00:04:24.669
a statement like

00:04:24.669 --> 00:04:28.250
P is equal to A. In fact we do not 
even need to take this

00:04:28.250 --> 00:04:33.210
address in another pointer variable if 
we simply print A

00:04:33.210 --> 00:04:38.250
then this gives us nothing but the
address of the first element in the array

00:04:38.250 --> 00:04:41.979
and if we want to dereference this and

00:04:41.979 --> 00:04:46.720
try to print *A then this will 
give us the value.

00:04:46.720 --> 00:04:50.520
So if we want to perform something like

00:04:50.520 --> 00:04:53.560
we want to print A plus one then

00:04:53.560 --> 00:04:58.720
this will give us the address 204 and *(A+1) will give us the

00:04:58.720 --> 00:05:00.760
address of the second element in the array

00:05:00.760 --> 00:05:04.750
value of the second element in the array. For an element

00:05:04.750 --> 00:05:08.090
in the array at index i

00:05:08.090 --> 00:05:12.570
we can retrieve the address of this 
particular element in the memory

00:05:12.570 --> 00:05:16.190
using either ampersand A[i]

00:05:16.190 --> 00:05:19.279
or simply A plus

00:05:19.279 --> 00:05:22.789
'i' and these two will give us the address

00:05:22.789 --> 00:05:26.710
of A[i] and the value of A[i] can be

00:05:26.710 --> 00:05:29.810
retrieved using either. We

00:05:29.810 --> 00:05:33.560
simply use A[i] or we can also use 

00:05:33.560 --> 00:05:37.599
*A plus i and *(A+1) will also 
give us the value.

00:05:37.599 --> 00:05:40.870
Now this is an important concept you can 
write

00:05:40.870 --> 00:05:45.680
ampersand A[i] or A plus i for each 
other and they mean the same.

00:05:45.680 --> 00:05:51.099
And we can write A[i] or *(A+1) for each other and they mean the same.

00:05:51.099 --> 00:05:54.260
That address of the first element in the array

00:05:54.260 --> 00:05:57.909
can also be called the Base address and

00:05:57.909 --> 00:06:01.180
A simply using the variable name A

00:06:01.180 --> 00:06:05.479
gives us the base address of the array. Let us 
now

00:06:05.479 --> 00:06:10.510
see some code examples and try to 
solidify our concepts further.

00:06:10.510 --> 00:06:14.190
In my program let's say we have

00:06:14.190 --> 00:06:18.000
and integer array A now as we said

00:06:18.000 --> 00:06:23.469
if we simply print A then this should 
give us the address of the first element

00:06:23.469 --> 00:06:24.139
in the array

00:06:24.139 --> 00:06:27.860
and we can also get the address of the 
first element in the array by

00:06:27.860 --> 00:06:31.080
using ampersand written in front A[0].

00:06:31.080 --> 00:06:35.469
If I simply print A[0] it will print 
the first element in the array

00:06:35.469 --> 00:06:38.659
and we can also print the first element 
in the array

00:06:38.659 --> 00:06:41.849
by using *

00:06:41.849 --> 00:06:45.180
operator in front of the variable 
name A.

00:06:45.180 --> 00:06:48.320
Let us now run this and see what 
happens.

00:06:48.320 --> 00:06:52.650
And I also need to put an end of line after
each of these print statements.

00:06:52.650 --> 00:06:57.760
OK so the output is that the first two 
lines are the same.

00:06:57.760 --> 00:07:00.880
They are giving us the address of the first 
element in array.

00:07:00.880 --> 00:07:04.550
And the second lines are giving us the 
value. In fact

00:07:04.550 --> 00:07:08.089
if we run a loop like this from 0 to 4

00:07:08.089 --> 00:07:11.449
then they can print address of the

00:07:11.449 --> 00:07:14.610
element at index i as &A[i] or

00:07:14.610 --> 00:07:18.979
(A+i) and we can print the value of i element as

00:07:18.979 --> 00:07:24.699
A[i] or *(A+i). Now if we see 
the output here

00:07:24.699 --> 00:07:29.030
this is a fresh run a new run so old 
address allocations will

00:07:29.030 --> 00:07:32.729
change but if we see the address printed 
in

00:07:32.729 --> 00:07:37.770
two lines for A[0] is same the value 
same again for A1 address is same

00:07:37.770 --> 00:07:42.129
four bytes ahead of the previous address 
and the value is as expected.

00:07:42.129 --> 00:07:45.960
And we can go on like this.

00:07:45.960 --> 00:07:49.340
Now one more thing. Even though just
using the variable name

00:07:49.340 --> 00:07:52.800
A returns us pointer to the

00:07:52.800 --> 00:07:55.840
base address or the address of the first
element

00:07:55.840 --> 00:07:59.120
and we can equate the variable name

00:07:59.120 --> 00:08:03.110
A against some pointer variable like 
this, you cannot do something like

00:08:03.110 --> 00:08:07.479
A plus plus, increment the value of A. This 
will give us compilation error.

00:08:07.479 --> 00:08:10.900
We can do something like P++ 
once we assign

00:08:10.900 --> 00:08:14.340
A to some pointer variable, other pointer variable,

00:08:14.340 --> 00:08:19.439
but incrementing A itself would be in
valid.

00:08:19.439 --> 00:08:23.620
So this was how arrays are stored in memory 
and how

00:08:23.620 --> 00:08:26.759
that addresses can be manipulated and 
how they can

00:08:26.759 --> 00:08:30.879
access the values using pointers.

00:08:30.879 --> 00:08:34.469
In the coming lessons we will talk about

00:08:34.469 --> 00:08:37.890
character arrays and even talk about passing arrays

00:08:37.890 --> 00:08:41.030
as function arguments. So thanks for
watching!

