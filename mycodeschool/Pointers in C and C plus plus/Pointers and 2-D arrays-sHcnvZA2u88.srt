0
00:00:00,580 --> 00:00:03,300
En esta lección, vamos a hablar de los 
punteros

1
00:00:03,300 --> 00:00:07,590
y matrices multidimensionales, como hemos 
visto en nuestras lecciones anteriores.

2
00:00:07,590 --> 00:00:12,099
Los conceptos de apuntadores y arreglos van 
de la mano. Ya hemos hablado de los punteros

3
00:00:12,099 --> 00:00:14,839
en el contexto de matrices unidimensionales

4
00:00:14,839 --> 00:00:19,030
cómo podemos trabajar con matrices 
unidimensionales utilizando punteros. Ahora 
vamos a ver cómo

5
00:00:19,030 --> 00:00:19,880
podemos trabajar con una matriz

6
00:00:19,880 --> 00:00:23,250
bidimensional o una imagen tridimensional

7
00:00:23,250 --> 00:00:27,100
o una matriz multi-dimensional en generales 
utilizando punteros.

8
00:00:27,100 --> 00:00:30,910
Para entender este concepto, una vez más,

9
00:00:30,910 --> 00:00:32,660
primero tenemos que entender cómo las 
matrices

10
00:00:32,660 --> 00:00:37,499
multidimensionales se organizan en memoria 
de computadoras. Primero vamos a volver a la

11
00:00:37,499 --> 00:00:40,760
organización de matrices unidimensionales en 
la memoria. Cuando se declara una matriz 
unidimensional algo como esto,

12
00:00:40,760 --> 00:00:45,329
digamos que estamos declarando un número 
entero matriz "A"

13
00:00:45,329 --> 00:00:51,199
de cinco elementos (A [5]), entonces 
básicamente lo que

14
00:00:51,199 --> 00:00:54,749
estamos haciendo es que estamos creando 
cinco variables enteras

15
00:00:54,749 --> 00:00:58,059
diferentes que nosotros puede nombrar a [0], 
A [1],

16
00:00:58,059 --> 00:01:01,229
A [2], A [3] y A [4] como un bloque contiguo 
de memoria.

17
00:01:01,229 --> 00:01:04,780
Lo que estoy mostrando aquí es una sección

18
00:01:04,780 --> 00:01:07,869
de la matriz de memoria ordenadores "A" 
digamos

19
00:01:07,869 --> 00:01:10,869
que está almacenada en la sección de la

20
00:01:10,869 --> 00:01:14,110
memoria y la dirección inicial de 'A' es 
200. Como sabemos cada byte en la memoria de 
un

21
00:01:14,110 --> 00:01:18,450
ordenador tiene una dirección y si suponemos 
que un

22
00:01:18,450 --> 00:01:21,770
número entero se almacena en cuatro bytes 
que es

23
00:01:21,770 --> 00:01:25,899
lo que se necesita en un compilador típica 
entonces

24
00:01:25,899 --> 00:01:28,920
el bloque de cuatro bytes que comienzan 
dirección 200

25
00:01:28,920 --> 00:01:33,549
será A [0] como yo "m mostrando aquí, bloque

26
00:01:33,549 --> 00:01:36,829
de cuatro bytes que comienzan dirección 204 
será a

27
00:01:36,829 --> 00:01:42,570
[1] siguiente bloque de cuatro bytes que 
comienzan dirección 208 será un [2] y así 
sucesivamente. Voy a llenar en algunos 
valores aquí.

28
00:01:42,570 --> 00:01:46,619
Lo hemos visto anteriormente también en 
nuestras lecciones anteriores si

29
00:01:46,619 --> 00:01:47,359
escribimos una declaración como esta, 
entonces esto está bien si

30
00:01:47,359 --> 00:01:51,850
sólo utiliza un nombre de variable "A" a 
continuación, nombre

31
00:01:51,850 --> 00:01:55,590
de la matriz en una expresión básicamente 
devuelve un puntero

32
00:01:55,590 --> 00:01:59,740
al primer elemento de la matriz porque se 
trata de

33
00:01:59,740 --> 00:02:04,200
una matriz de enteros de modo que cada 
elemento será

34
00:02:04,200 --> 00:02:09,379
un entero, por tanto, 'a' devuelve un 
puntero a un entero. Una vez que he escrito 
una

35
00:02:09,379 --> 00:02:14,670
declaración como int * p igual A. Puedo usar 
la aritmética de punteros y eliminación de

36
00:02:14,670 --> 00:02:18,050
referencias para acceder a todos los 
elementos de la matriz. Si yo sólo trato de 
imprimir

37
00:02:18,050 --> 00:02:21,310
la dirección almacenada en 'P' y

38
00:02:21,310 --> 00:02:22,970
no estoy usando sentencia printf completo

39
00:02:22,970 --> 00:02:25,989
aquí mi salida será de 200,

40
00:02:25,989 --> 00:02:29,769
si yo simplemente trato de eliminar

41
00:02:29,769 --> 00:02:33,140
la referencia "P" entonces la salida será de 
2. Si me gustaría tratar de imprimir algo 
así como

42
00:02:33,140 --> 00:02:36,519
* (p + 2), entonces la salida será de

43
00:02:36,519 --> 00:02:39,670
6, porque tenemos un puntero entero 
añadiendo 1 nos

44
00:02:39,670 --> 00:02:43,680
llevará a la dirección del siguiente número 
entero que

45
00:02:43,680 --> 00:02:48,459
será cuatro bytes por delante, añadiendo 2 
nos llevará

46
00:02:48,459 --> 00:02:49,030
a la dirección del lado siguiente, que será 
de

47
00:02:49,030 --> 00:02:53,629
8 bytes por delante si queremos ser de 
impresión

48
00:02:53,629 --> 00:02:58,090
(P + 2) será 208 y si quisiéramos eliminar

49
00:02:58,090 --> 00:03:01,200
la referencia y nos gustaría imprimir * (p + 
2), entonces será el valor 6.

50
00:03:01,200 --> 00:03:05,120
Ya hemos hablado de la aritmética de 
punteros en nuestras lecciones anteriores.

51
00:03:05,120 --> 00:03:08,799
Ahora lenguaje nos da esta flexibilidad que 
podemos utilizar el nombre

52
00:03:08,799 --> 00:03:12,530
de la matriz como un puntero para toda la 
eliminación de

53
00:03:12,530 --> 00:03:18,060
referencias a lo que en lugar de hacer todo 
esto de

54
00:03:18,060 --> 00:03:22,060
impresión con P, si queremos hacer todo esto 
con "A" seguirá siendo la mismo.

55
00:03:22,060 --> 00:03:25,310
De hecho * (A + i) es igual a

56
00:03:25,310 --> 00:03:29,040
[i], se trata de sintaxis alternativa y (A +

57
00:03:29,040 --> 00:03:32,420
i) es igual a & a [i] tanto nos

58
00:03:32,420 --> 00:03:36,220
dará la dirección del elemento i de la 
matriz.

59
00:03:36,220 --> 00:03:39,890
Por favor recuerde que a pesar de que 
podemos usar el nombre

60
00:03:39,890 --> 00:03:44,040
de la matriz como puntero para todo esto 
desreferenciar y la aritmética.

61
00:03:44,040 --> 00:03:47,769
No es parecer como una variable de puntero 
para que podamos

62
00:03:47,769 --> 00:03:51,280
hacer algo como P igual a A, como lo hemos 
hecho

63
00:03:51,280 --> 00:03:54,420
aquí así que esto está bien, pero no podemos 
hacerlo a

64
00:03:54,420 --> 00:03:59,459
la inversa, no podemos decir A igual P, esto 
le dará error de compilación.

65
00:03:59,459 --> 00:04:02,480
Así que esto es más o menos

66
00:04:02,480 --> 00:04:06,250
cómo nos gustaría utilizar punteros con 
matrices unidimensionales. Ahora vamos a 
decir que queremos

67
00:04:06,250 --> 00:04:09,280
crear una matriz de dos dimensiones. Voy a 
declarar una matriz bidimensional

68
00:04:09,280 --> 00:04:12,349
de enteros con nombre B algo

69
00:04:12,349 --> 00:04:16,930
como esto, ahora lo que estamos

70
00:04:16,930 --> 00:04:20,289
haciendo aquí es que estamos creando 
conjunto de matriz.

71
00:04:20,289 --> 00:04:24,100
Estamos creando dos matrices unidimensionales

72
00:04:24,100 --> 00:04:27,330
de tres elementos cada uno. Esta vez B [0] y 
B

73
00:04:27,330 --> 00:04:31,470
[1] son ​​ambas matrices unidimensionales de

74
00:04:31,470 --> 00:04:34,680
números enteros de tres cada una. Una matriz 
unidimensional de tres enteros sería de

75
00:04:34,680 --> 00:04:38,120
12 bytes si cada entero es de 4

76
00:04:38,120 --> 00:04:42,490
bytes de tamaño por lo que si tengo

77
00:04:42,490 --> 00:04:47,020
que mostrar esto en memoria del primer bloque

78
00:04:47,020 --> 00:04:51,060
de 12 bytes que comienzan dirección 400 será

79
00:04:51,060 --> 00:04:55,050
b [0] y el siguiente bloque de 12

80
00:04:55,050 --> 00:04:58,440
bytes que comienzan dirección 412 será de B 
[1]. Como habíamos fijado nombre de la 
matriz devuelve un

81
00:04:58,440 --> 00:05:02,819
puntero al primer elemento de la matriz, 
esta vez

82
00:05:02,819 --> 00:05:06,169
cada elemento no es un entero, cada elemento 
es

83
00:05:06,169 --> 00:05:09,930
una matriz unidimensional de tres enteros 
por lo que

84
00:05:09,930 --> 00:05:13,810
si me gustaría escribir una declaración como 
esta int

85
00:05:13,810 --> 00:05:17,380
* P igual B, entonces esto me dará un

86
00:05:17,380 --> 00:05:21,600
error de compilación porque 'B' devolverá un 
puntero al

87
00:05:21,600 --> 00:05:25,620
array 1-D de 3 enteros y no sólo un

88
00:05:25,620 --> 00:05:29,490
puntero a un entero, el tipo de una materia

89
00:05:29,490 --> 00:05:32,960
puntero no cuando usted tiene que leer la 
dirección,

90
00:05:32,960 --> 00:05:36,759
es importante cuando se deja de hacer 
referencia o

91
00:05:36,759 --> 00:05:37,910
cuando se realiza la aritmética de punteros, 
es muy importante que entendamos esto.

92
00:05:37,910 --> 00:05:42,039
Podemos definir una matriz de punteros a 1-D

93
00:05:42,039 --> 00:05:45,160
de 3 enteros como esta y ahora si

94
00:05:45,160 --> 00:05:48,789
voy a equiparar esto con "P" esto es

95
00:05:48,789 --> 00:05:53,139
todo Equate derecho 'B' por 'P', esta vez

96
00:05:53,139 --> 00:05:56,400
si me acaba de imprimir 'B' que es

97
00:05:56,400 --> 00:06:00,590
igual que la impresión de la dirección de B 
[0] esto será 400.

98
00:06:00,590 --> 00:06:04,550
Si se imprimirá * B que será igual que

99
00:06:04,550 --> 00:06:08,060
la B [0], entonces B [0] en esta ocasión

100
00:06:08,060 --> 00:06:12,030
es nombre de variable para una matriz 
unidimensional de

101
00:06:12,030 --> 00:06:15,410
3 enteros, por lo que sólo utilizando el 
nombre

102
00:06:15,410 --> 00:06:19,910
de B [0] devolverá nos puntero a la primer

103
00:06:19,910 --> 00:06:23,759
entero en B [0], que se convierte en B

104
00:06:23,759 --> 00:06:25,310
[0] [0], así que estoy poniendo esto 'y' 
firmar aquí, delante de B [0] [0].

105
00:06:25,310 --> 00:06:29,770
En primer número entero en B [0] será este 
bloque

106
00:06:29,770 --> 00:06:33,860
de cuatro bytes su dirección una vez más es 
de 400.

107
00:06:33,860 --> 00:06:37,400
Bueno, ahora también he creado tres bloques 
de

108
00:06:37,400 --> 00:06:40,470
cuatro bytes cada uno, tanto en B [0]

109
00:06:40,470 --> 00:06:43,910
y B [1], y también lleno en algunos valores. 
Ahora voy a escribir algunas declaraciones

110
00:06:43,910 --> 00:06:47,910
grabados y quiero que adivine la salida.

111
00:06:47,910 --> 00:06:50,910
¿Cuál será la salida si voy

112
00:06:50,910 --> 00:06:56,610
a tratar de impresión B + 1. Voy a escribir 
la dirección de cada bloque de cuatro

113
00:06:56,610 --> 00:07:01,490
bytes de la matriz 2-D de la dirección de un

114
00:07:01,490 --> 00:07:02,550
bloque es la dirección del primer byte en el 
bloque.

115
00:07:02,550 --> 00:07:05,830
Bueno por lo cuál será el valor de B + 1.

116
00:07:05,830 --> 00:07:09,060
B este tiempo nos devuelve un puntero a una

117
00:07:09,060 --> 00:07:12,110
matriz unidimensional de 3 enteros por lo 
que si

118
00:07:12,110 --> 00:07:15,490
me gustaría hacer una aritmética de punteros 
como la

119
00:07:15,490 --> 00:07:18,900
adición de más 1 nos movemos a la siguiente

120
00:07:18,900 --> 00:07:22,599
matriz 1-D de tres enteros por lo que se

121
00:07:22,599 --> 00:07:23,810
va a mover para hacer frente a cuatrocientos 
más

122
00:07:23,810 --> 00:07:27,979
el tamaño de la matriz unidimensional de 3 
enteros

123
00:07:27,979 --> 00:07:33,039
en bytes, por lo que la salida será 412

124
00:07:33,039 --> 00:07:36,419
que tiene sentido porque B + 1 es igual

125
00:07:36,419 --> 00:07:38,330
a & B [1], o dirección de B [1] y la 
dirección de B [1] es 412.

126
00:07:38,330 --> 00:07:42,340
Bueno, ahora lo que si imprimo * (B + 1), 
cuando

127
00:07:42,340 --> 00:07:46,670
estamos poniendo muestras del asterisco 
cuando estamos tratando de eliminar la

128
00:07:46,670 --> 00:07:51,280
referencia de esto es cuando el tipo de 
puntero se convierte en importante. 'B' es 
un puntero a una matriz unidimensional de 
tres

129
00:07:51,280 --> 00:07:52,440
números enteros, por lo que B + 1 también es

130
00:07:52,440 --> 00:07:56,800
un puntero a una sola dimensión gama de 3 
enteros

131
00:07:56,800 --> 00:08:01,150
y cuando vamos a eliminar la referencia 
obtendremos toda esta

132
00:08:01,150 --> 00:08:03,630
matriz unidimensional de tres números 
enteros a partir de direcciones 412.

133
00:08:03,630 --> 00:08:07,910
* (B + 1) es igual a B [1] por lo que 
obtendrá B [1].

134
00:08:07,910 --> 00:08:11,860
Ahora B imprimir [1] que consiste en 
utilizar el

135
00:08:11,860 --> 00:08:16,560
nombre de esta matriz unidimensional B [1] 
lo que

136
00:08:16,560 --> 00:08:22,240
nos debe devolver el puntero al primer 
entero en B [1]. Así * (B + 1) es básicamente

137
00:08:22,240 --> 00:08:28,190
puntero a este entero en la dirección 412. 
Una vez más, esta salida será 412.

138
00:08:28,190 --> 00:08:32,080
Todas estas expresiones * (B + 1)

139
00:08:32,080 --> 00:08:35,170
o B [1] o & B [1]

140
00:08:35,170 --> 00:08:40,440
[0] están regresando nos puntero a entero. 
Está bien ahora tiene que prepararse porque

141
00:08:40,440 --> 00:08:44,590
voy a darle algunos difíciles de descifrar. 
¿Cuál será el resultado si voy

142
00:08:44,590 --> 00:08:47,730
a imprimir * (B + 1)

143
00:08:47,730 --> 00:08:50,960
+2 tomar algún tiempo y pensar en ello.

144
00:08:50,960 --> 00:08:54,430
* (B + 1) como vimos arriba,

145
00:08:54,430 --> 00:08:59,060
devolverá un puntero entero en primer entero

146
00:08:59,060 --> 00:09:02,540
en B [1], al entero en la dirección 412. La 
adición de 2 aquí se realiza la aritmética de

147
00:09:02,540 --> 00:09:05,610
punteros porque * (B + 1) es un puntero a

148
00:09:05,610 --> 00:09:11,030
un entero almacenar esta dirección 412 
añadiendo 2 que está

149
00:09:11,030 --> 00:09:16,150
pasando, básicamente, a la dirección del 
lado siguiente entero lo

150
00:09:16,150 --> 00:09:19,520
que significa saltarse 8 bytes y e ir a la

151
00:09:19,520 --> 00:09:23,780
referencia entero en la dirección 420 * (B + 
1)

152
00:09:23,780 --> 00:09:29,080
en esta expresión se puede escribir como B 
[1] simplemente

153
00:09:29,080 --> 00:09:32,640
B [1], ya que son sustitutos entre sí existe 
la sintaxis, se alternan.

154
00:09:32,640 --> 00:09:36,610
Así que este es un igual que la B [1]

155
00:09:36,610 --> 00:09:39,950
2 y una vez más estas expresiones están 
regresando puntero

156
00:09:39,950 --> 00:09:43,570
a un entero que están regresando puntero de 
este elemento

157
00:09:43,570 --> 00:09:46,980
B [1] [2] y por eso también podemos & B [1] 
[2].

158
00:09:46,980 --> 00:09:51,280
Todos estos tres una vez más son los mismos. 
Vamos a hacer una copia de impresión más.

159
00:09:51,280 --> 00:09:54,740
Si usted puede conseguir este derecho, puedo

160
00:09:54,740 --> 00:09:58,440
decir que usted es bueno trabajar con

161
00:09:58,440 --> 00:10:02,350
matrices bidimensionales usando punteros lo 
que será

162
00:10:02,350 --> 00:10:06,410
la salida para esta expresión * (* B + 1).

163
00:10:06,410 --> 00:10:10,860
¿Cuál será la salida de esta expresión. 
Piénsalo.

164
00:10:10,860 --> 00:10:14,080
Cada vez que se encuentra con una expresión 
con la aritmética de

165
00:10:14,080 --> 00:10:18,590
punteros y eliminación de referencias a 
continuación, debe ir paso a paso.

166
00:10:18,590 --> 00:10:21,650
Aquí 'B' está regresando nos puntero a una

167
00:10:21,650 --> 00:10:24,940
matriz unidimensional de tamaño tres, matriz 
unidimensional de

168
00:10:24,940 --> 00:10:29,520
tres enteros y eliminación de referencias 
que nos

169
00:10:29,520 --> 00:10:33,280
dará la matriz unidimensional de modo * B

170
00:10:33,280 --> 00:10:36,350
como sabemos que nos vamos a dar B

171
00:10:36,350 --> 00:10:40,630
[0] como debe ser igual que la B

172
00:10:40,630 --> 00:10:43,740
[0], ahora B [0] en mi expresión, porque

173
00:10:43,740 --> 00:10:46,850
B [0] es el nombre de una matriz

174
00:10:46,850 --> 00:10:50,500
unidimensional devuelve me puntero al primer 
número entero

175
00:10:50,500 --> 00:10:54,830
en la matriz unidimensional, así que B [0]

176
00:10:54,830 --> 00:10:55,530
retornos puntero a entero vamos a obtener un

177
00:10:55,530 --> 00:10:59,830
Ahora lo que sucederá si se le agrega 1 a un

178
00:10:59,830 --> 00:11:05,160
puntero entero que le llevará cuatro bytes 
por delante al siguiente

179
00:11:05,160 --> 00:11:08,270
número entero que le volverá puntero al 
siguiente número entero por

180
00:11:08,270 --> 00:11:13,480
lo que vamos a obtener un puntero a este 
entero en la dirección 404. (* B + 1) es 
básicamente

181
00:11:13,480 --> 00:11:18,470
& B [0] [1] y con

182
00:11:18,470 --> 00:11:22,290
esta desreferenciar final que puede 
deshacerse

183
00:11:22,290 --> 00:11:25,600
de este "y" expresión por lo

184
00:11:25,600 --> 00:11:29,160
general será de B [0] [1], que es de tres. 
Para una matriz bidimensional B [i] [j],

185
00:11:29,160 --> 00:11:33,750
donde "B" es el nombre de mi

186
00:11:33,750 --> 00:11:37,220
matriz bidimensional y 'I' y 'j' son

187
00:11:37,220 --> 00:11:40,410
algunos índices pueden escribirse como * (B

188
00:11:40,410 --> 00:11:43,750
[i] + j), y una vez más

189
00:11:43,750 --> 00:11:47,510
B [i] se puede escribir como *

190
00:11:47,510 --> 00:11:50,610
(B + i), por lo que estas tres expresiones 
son iguales.

191
00:11:50,610 --> 00:11:53,670
Recomiendo probar todo esto en el código 
real.

192
00:11:53,670 --> 00:11:57,760
Hasta ahora, esta discusión ha sido sobre el

193
00:11:57,760 --> 00:11:58,990
trabajo con matrices de dos dimensiones 
utilizando punteros.

194
00:11:58,990 --> 00:12:02,570
Nos detendremos aquí por esta lección. En 
otra lección, vamos a jugar con algo

195
00:12:02,570 --> 00:12:06,450
de código real y también vamos a discutir

196
00:12:06,450 --> 00:12:11,120
cómo podemos trabajar con una variedad de más

197
00:12:11,120 --> 00:12:14,340
alta dimensión como una matriz 
tridimensional, también hablaremos

198
00:12:14,340 --> 00:12:17,850
de paso de las matrices de funciones a 
través de punteros. Esto es todo por esta 
lección. ¡Gracias por ver!

