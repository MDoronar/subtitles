WEBVTT
Kind: captions
Language: en

00:00:00.729 --> 00:00:08.179
Memory is one important and crucial resource
on our machine and it is

00:00:08.179 --> 00:00:12.659
always good to know the architecture of memory,
the way operating

00:00:12.659 --> 00:00:17.449
system manages memory and the way memory is
accessible to us as

00:00:17.449 --> 00:00:21.169
programmers. In this lesson we will discuss
the concept of dynamic

00:00:21.169 --> 00:00:25.800
memory and we will see how to work with dynamic
memory using C or

00:00:25.800 --> 00:00:32.340
C++. The memory that is assigned to a program
or application in a

00:00:32.340 --> 00:00:38.250
typical architecture can be divided into four
segments. One segment of

00:00:38.250 --> 00:00:44.309
the memory is assigned to store the instructions
that need to be

00:00:44.309 --> 00:00:51.000
executed. Another section stores all the static
or global variables, the

00:00:51.000 --> 00:00:54.859
variables that are not declared inside a function,
and that have the

00:00:54.859 --> 00:00:58.690
whole lifetime of an application, they are
accessible anywhere during the

00:00:58.690 --> 00:01:03.239
whole life cycle of the application as long
as the application is running.

00:01:03.239 --> 00:01:08.090
One section of the memory is used to store
all the information of

00:01:08.090 --> 00:01:12.510
function calls and all the local variables
and we have also talked about

00:01:12.510 --> 00:01:18.950
stack in our lesson on Call by Reference.
Local variables are declared

00:01:18.950 --> 00:01:24.070
inside a function and they live only until
the time the function is executing.

00:01:24.070 --> 00:01:28.210
The amount of memory set aside for these three
segments: the text

00:01:28.210 --> 00:01:31.130
segment, the global variable segment and the
stack, does not grow

00:01:31.130 --> 00:01:35.260
while the application is running. We will
come back to why we use this

00:01:35.260 --> 00:01:40.300
fourth segment- heap, in a while. Let us
first understand how these

00:01:40.300 --> 00:01:44.680
three segments of the memory are used when
a program executes. I

00:01:44.680 --> 00:01:49.500
have a simple C program here. We have a function
square that gives me

00:01:49.500 --> 00:01:54.110
the square of a number. We have another function
Square of Sum that is

00:01:54.110 --> 00:01:59.970
given two arguments x and y, and it returns
us the square of x plus y.

00:01:59.970 --> 00:02:04.700
And, in the main method, I am just calling
this function Square of Sum

00:02:04.700 --> 00:02:09.280
passing it two arguments a and b. Let us now
see what happens in the

00:02:09.280 --> 00:02:15.090
memory when this program executes. Let us
say this rectangle in green

00:02:15.090 --> 00:02:20.599
here is memory reserved as stack and the rectangle
in orange is the

00:02:20.599 --> 00:02:24.959
memory reserved as Static or Global variable
section. When the program

00:02:24.959 --> 00:02:28.790
starts executing, first the main method is
invoked. When the main

00:02:28.790 --> 00:02:33.109
method is invoked, some amount of memory from
the stack is allocated

00:02:33.109 --> 00:02:38.359
for execution of main. And this total is a
global variable, so it should sit

00:02:38.359 --> 00:02:42.930
in the global section. The amount of memory
allocated in stack for

00:02:42.930 --> 00:02:47.530
execution of main can also be called the stack
frame for the method

00:02:47.530 --> 00:02:53.290
main. All the local variables, arguments,
and the information where this

00:02:53.290 --> 00:02:58.040
function should return back to, all this information
is stored within this

00:02:58.040 --> 00:03:02.680
stack frame. The size of the stack frame for
a method is calculated

00:03:02.680 --> 00:03:07.359
when the program is compiling. Now, when main
calls Square of Sum

00:03:07.359 --> 00:03:14.569
method, let's write shortcut SOS, for Square
of Sum, then a stack frame

00:03:14.569 --> 00:03:20.040
is allocated for the call to Square Of Sum,
all these local variables x, y

00:03:20.040 --> 00:03:24.379
and z will sit in this particular stack frame.
Now, Sum of Square calls

00:03:24.379 --> 00:03:29.170
Square, let's again put a shortcut here for
square, so another stack frame

00:03:29.170 --> 00:03:34.019
for square and it will have its own local
variables. At any time during the

00:03:34.019 --> 00:03:38.689
execution of the program, the function at
the top of the stack is

00:03:38.689 --> 00:03:44.290
executing and rest are kind of paused, waiting
for the function above to

00:03:44.290 --> 00:03:49.659
return something and then it will resume execution.
I have drawn these

00:03:49.659 --> 00:03:53.909
play and pause button here, in case you do
not understand. Ok, so this

00:03:53.909 --> 00:03:58.739
total is a global variable, it's here in
this section. Global variable

00:03:58.739 --> 00:04:03.840
because it is not declared inside a function.
We can access it anywhere,

00:04:03.840 --> 00:04:06.370
and then we go to this particular statement
where we call Square of

00:04:06.370 --> 00:04:11.389
Sum, and Square of Sum is calling Square and
so this is called our call

00:04:11.389 --> 00:04:15.200
stack. This program may not be the best way
to implement this logic. I

00:04:15.200 --> 00:04:19.110
have written this program this way so that
I can have some nested

00:04:19.110 --> 00:04:23.290
methods calling each other. Let's say right
now we are at this particular

00:04:23.290 --> 00:04:28.130
statement, we are executing this statement.
So, at this stage the call

00:04:28.130 --> 00:04:32.390
stack will have these three methods. Now,
when this method finishes,

00:04:32.390 --> 00:04:36.570
we will return back to this particular statement.
As soon as Square

00:04:36.570 --> 00:04:41.630
function will return, it will be cleared from
the stack memory and now

00:04:41.630 --> 00:04:46.350
Square of Sum function will resume. Once again
when Square of Sum

00:04:46.350 --> 00:04:50.700
finished, the control will come to this particular
line total is equal to

00:04:50.700 --> 00:04:58.790
Square of Sum and main will resume again.
Now, main will call printf, so

00:04:58.790 --> 00:05:04.420
once again printf will go to the top of the
stack. Printf will finish and the

00:05:04.420 --> 00:05:08.510
control will come back again to main and now
main will finish. And, now

00:05:08.510 --> 00:05:13.570
main finishes, program will also finish. So,
In the end, our global variables

00:05:13.570 --> 00:05:17.570
will also get cleared. There was no need in
this program to keep this

00:05:17.570 --> 00:05:23.070
variable total as global. We should assign
a variable as global only if it

00:05:23.070 --> 00:05:27.590
is needed at multiple places in multiple functions
and it is needed for

00:05:27.590 --> 00:05:33.440
the whole lifetime of the program, otherwise
it is a waste of memory to

00:05:33.440 --> 00:05:38.500
keep a variable for the whole lifetime of
program execution. We had kept

00:05:38.500 --> 00:05:42.990
one global variable in this program just to
understand the concepts.

00:05:42.990 --> 00:05:49.020
Here, I must point out one more thing. When
our program starts, our

00:05:49.020 --> 00:05:54.030
operating system allocates some amount of
reserved space. Let's say it

00:05:54.030 --> 00:05:59.780
allocates 1 MB of space as stack, but the
actual allocation of the stack

00:05:59.780 --> 00:06:04.030
frame and the actual allocation of the local
variables happens from the

00:06:04.030 --> 00:06:09.340
stack during runtime. And if our call stack
grows beyond the reserved

00:06:09.340 --> 00:06:14.650
memory for the stack like for example, if
a method A calls B, B calls C

00:06:14.650 --> 00:06:19.440
and we go on calling and we exhaust the whole
space reserved for the

00:06:19.440 --> 00:06:26.180
stack, then this is called stack overflow
and in this case our program will

00:06:26.180 --> 00:06:31.510
crash. One common case of stack overflow is
when you write a bad

00:06:31.510 --> 00:06:37.470
recursion and your program goes infinitely
into recursion. So, as we can

00:06:37.470 --> 00:06:42.170
see, there are some limitations of stack. The
memory set aside for stack

00:06:42.170 --> 00:06:46.150
does not grow during runtime. Application
cannot request more memory

00:06:46.150 --> 00:06:52.340
for stack. So, if it is 1 MB, then if the
allocation of variable and functions

00:06:52.340 --> 00:06:57.210
in stack exceeds 1 MB, our program will crash.
Further the allocation and

00:06:57.210 --> 00:07:02.030
deallocation of memory onto the stack happens
by a set rule. When a

00:07:02.030 --> 00:07:07.490
function is called, it is pushed onto the
stack, when it finishes, it is

00:07:07.490 --> 00:07:10.550
popped out of the stack or removed from the
stack. It is not possible to

00:07:10.550 --> 00:07:15.610
manipulate the scope of a variable if it is
on the stack. Another

00:07:15.610 --> 00:07:20.810
limitation is that if we need to declare a
large data type, like an array as

00:07:20.810 --> 00:07:25.530
local variable, then we need to know the size
of the array at compile

00:07:25.530 --> 00:07:29.850
time only. If we have a scenario like we have
to decide how large the

00:07:29.850 --> 00:07:34.470
array will be based on some parameter during
runtime then it is a

00:07:34.470 --> 00:07:39.970
problem with stack. For all these problems,
like allocating large chunks of

00:07:39.970 --> 00:07:44.800
memory or keeping variable in the memory until
the time we want we

00:07:44.800 --> 00:07:53.310
have the heap. Unlike the stack, the application's heap
is not fixed. Its size can vary

00:07:53.310 --> 00:07:57.720
during the lifetime of the application and
there is no set rule for

00:07:57.720 --> 00:08:01.990
allocation or deallocation of the memory.
A programmer can totally

00:08:01.990 --> 00:08:07.200
control how much memory to use from the heap,
and until when to keep

00:08:07.200 --> 00:08:12.230
the data in the memory during the application's
lifetime. The heap can

00:08:12.230 --> 00:08:18.010
grow as long as you do not run out of memory
on the system itself. That

00:08:18.010 --> 00:08:21.790
is a dangerous thing also and we need to be
really careful about using

00:08:21.790 --> 00:08:27.240
heap for this reason. We also sometimes call
heap a free pool of memory

00:08:27.240 --> 00:08:32.579
or a free store of memory. We can get as much
as we want from heap.

00:08:32.579 --> 00:08:37.999
How the heap is implemented by the operating system,
language runtime or

00:08:37.999 --> 00:08:42.569
the compiler, is something which can vary,
which is a thing of computer

00:08:42.569 --> 00:08:47.170
architecture. But an abstracted way of looking
at the heap as a

00:08:47.170 --> 00:08:52.470
programmer is that this is one large free
pool of memory available to us

00:08:52.470 --> 00:08:59.339
that we can use flexibly as per our need.
The heap is also called dynamic

00:08:59.339 --> 00:09:05.470
memory and using the heap is referred to as
dynamic memory allocation.

00:09:05.470 --> 00:09:11.569
Let us now see how to use the heap in out
C or C++ program. I will clear

00:09:11.569 --> 00:09:17.629
this code in the left and I will draw one
more rectangular block here for

00:09:17.629 --> 00:09:21.660
heap. There is one more thing that I must
point out before moving

00:09:21.660 --> 00:09:26.670
forward. The heap is also one data structure and
if you do not know about

00:09:26.670 --> 00:09:30.089
this data structure Heap yet, you will learn
about it in your Data

00:09:30.089 --> 00:09:34.620
Structure course. But this nomenclature here
has nothing to do with

00:09:34.620 --> 00:09:40.879
heap data structure. The term "heap" is being
used only for the large free

00:09:40.879 --> 00:09:44.589
pool of memory. The heap data structure does not
come anywhere in this

00:09:44.589 --> 00:09:49.029
context. This term often confuses a lot of
people when they know about

00:09:49.029 --> 00:09:53.269
heap data structure. Stack is also one data
structure but the stack

00:09:53.269 --> 00:09:56.860
segment of the memory is actually an implementation
of the stack data

00:09:56.860 --> 00:10:00.410
structure, but the heap is not an implementation
of the heap data structure.

00:10:00.410 --> 00:10:06.019
To use dynamic memory in C, we need to know
about four functions

00:10:06.019 --> 00:10:14.889
malloc, calloc, realloc and free. To use dynamic
memory in C++ we need

00:10:14.889 --> 00:10:22.249
to know about two operators: new and delete.
These four functions can

00:10:22.249 --> 00:10:29.170
also be used in C++, as C++ has backward compatibility.
It is only a

00:10:29.170 --> 00:10:34.559
superset of C. But C++ programmers use mostly
these two operators,

00:10:34.559 --> 00:10:40.009
new and delete. We will see some code examples
and try to understand

00:10:40.009 --> 00:10:44.509
how things happen when dynamic memory is used.
Let us first pick up

00:10:44.509 --> 00:10:50.110
some code examples in C. Let's write a C
program. I will clean up some

00:10:50.110 --> 00:10:54.420
of the stuff in the right. 1 MB for stack,
this was just an assumption. In

00:10:54.420 --> 00:10:57.999
reality, the size of the stack will be decided
by the operating system and

00:10:57.999 --> 00:11:01.569
the compiler. It is a thing of computer architecture.
Coming back to the

00:11:01.569 --> 00:11:05.879
code, if we declare a variable like this,
then this variable is a local

00:11:05.879 --> 00:11:10.970
variable. It goes on the stack. Memory for
this particular variable 'a' will

00:11:10.970 --> 00:11:16.809
be allocated from the stack frame of the main
method. Let us say we

00:11:16.809 --> 00:11:21.209
want to store an integer on the heap. To reserve,
or get some space

00:11:21.209 --> 00:11:25.220
allocated on the heap, we need to call the
malloc function, something

00:11:25.220 --> 00:11:29.709
like this. The malloc function asks for how
much memory to allocate on

00:11:29.709 --> 00:11:35.740
the heap in bytes. When we say malloc and
pass as argument size of

00:11:35.740 --> 00:11:39.209
integer, then we are saying that "Hey, give
me a block of memory, which

00:11:39.209 --> 00:11:44.920
is 4 bytes". 4 bytes is the typical size of
the integer. So, one block of 4

00:11:44.920 --> 00:11:49.059
bytes will be reserved or allocated on the
heap and malloc will return a

00:11:49.059 --> 00:11:53.699
pointer to starting address of this block.
And, malloc returns a void

00:11:53.699 --> 00:11:58.860
pointer. Let us say, the starting address
of this block of 4 bytes is 200,

00:11:58.860 --> 00:12:03.009
then malloc will return us address 200. Now,
we have a pointer to

00:12:03.009 --> 00:12:09.079
integer p, which is a local variable to main.
So, this will be allocated in

00:12:09.079 --> 00:12:12.839
the stack frame of the main method. We have
done a type casting here,

00:12:12.839 --> 00:12:17.420
because malloc returns pointer to void, sorry,
void pointer and p is an

00:12:17.420 --> 00:12:22.029
integer pointer. Now, p stores the address
of this block of memory which

00:12:22.029 --> 00:12:27.670
is 200. So, we have got some block of memory
on the heap which we

00:12:27.670 --> 00:12:32.420
want to use to store an integer. Right now,
we do not know what's there

00:12:32.420 --> 00:12:37.230
in this particular block of memory. If we
want to fill in something here,

00:12:37.230 --> 00:12:41.610
we need to dereference this location using
the pointer p and then put in

00:12:41.610 --> 00:12:47.199
some value. In fact the only way to use memory
on the heap is through

00:12:47.199 --> 00:12:51.129
reference. All the malloc function does it,
looks for some free space in

00:12:51.129 --> 00:12:55.499
the heap, books it or reserves it for you
and give back the pointer. And

00:12:55.499 --> 00:12:58.899
the only way you can access this particular
block by keeping a pointer

00:12:58.899 --> 00:13:04.689
variable which will be local to your function.
Now, let us write something

00:13:04.689 --> 00:13:10.869
like this. After writing 10 in this particular
block, I will go ahead and

00:13:10.869 --> 00:13:15.100
make one more call to malloc. When I make
one more call to malloc, one

00:13:15.100 --> 00:13:19.790
more block of 4 bytes is allocated on the
heap and let us say the address

00:13:19.790 --> 00:13:24.189
is 400 for this block. Now, the address that
is returned by the second

00:13:24.189 --> 00:13:28.930
call to malloc, we store this address in the
variable p. So, what happens

00:13:28.930 --> 00:13:33.899
is, that p is now pointing to the address
400. The next line writes

00:13:33.899 --> 00:13:38.959
address 20 to this address. We allocated one
more block and we

00:13:38.959 --> 00:13:43.300
modified the address in p to point to this
block. The previous block will

00:13:43.300 --> 00:13:47.600
still sit in the heap. This memory we are
still consuming, it will not be

00:13:47.600 --> 00:13:51.959
cleared off automatically. At any point in
our program, if we are done

00:13:51.959 --> 00:13:56.360
using some block of memory which is dynamically
allocated using

00:13:56.360 --> 00:14:00.439
malloc, we also need to clear it, because
it is unnecessary consumption

00:14:00.439 --> 00:14:03.589
of memory which is an important resource.
So, what we should have

00:14:03.589 --> 00:14:08.029
done here is that once we were done using
this particular block of

00:14:08.029 --> 00:14:13.279
memory at 200, we should have made a call
to the function free. Any

00:14:13.279 --> 00:14:18.019
memory which is allocated using malloc, is
cleared off by calling free.

00:14:18.019 --> 00:14:21.559
And to free, we pass the pointer to the starting
address of the memory

00:14:21.559 --> 00:14:25.769
block. So, now with this code this first block
of memory will first be

00:14:25.769 --> 00:14:30.589
cleared and then we will be pointing to another
memory address. It is

00:14:30.589 --> 00:14:34.759
the responsibility of the programmer to clear
anything on the heap if he

00:14:34.759 --> 00:14:39.429
has allocated it and does not need it any
further. So, you see, in terms of

00:14:39.429 --> 00:14:43.230
the scope of the variable, anything allocated
on the heap is not

00:14:43.230 --> 00:14:47.999
automatically deallocated when the function
completes like on the stack.

00:14:47.999 --> 00:14:52.639
And, it does not need to live for the whole
lifetime of the application

00:14:52.639 --> 00:14:57.170
like a global variable. We can control when
to free anything on the heap,

00:14:57.170 --> 00:15:01.589
when to deallocate anything on the heap. If
we wanted to store an array

00:15:01.589 --> 00:15:04.850
in the heap, like let's say we wanted to store
an integer array into the

00:15:04.850 --> 00:15:09.119
heap, then all we do is make a call to the
malloc asking for one block of

00:15:09.119 --> 00:15:13.990
memory equal to the total size of the array
in bytes. So, if we want an

00:15:13.990 --> 00:15:20.420
integer array of 20 elements, then we will
make a call to malloc asking

00:15:20.420 --> 00:15:25.319
20 X size of int which will be 4 number of
bytes. So, what will happen

00:15:25.319 --> 00:15:31.170
now, is that one bit of contiguous block of
byte for 20 integers will be

00:15:31.170 --> 00:15:34.910
allocated on the heap and we will get the
starting address of the heap.

00:15:34.910 --> 00:15:41.019
So, we kind of get the base address of the
array. This p will point here, to

00:15:41.019 --> 00:15:46.379
the base address of this block. And then in
our code we can use this, 20

00:15:46.379 --> 00:15:53.399
integers as P[0], P[1], P[2] and so on. As
we know, P[0] is same as

00:15:53.399 --> 00:15:58.970
saying value at address P, and P[1] is same
as saying value at address

00:15:58.970 --> 00:16:04.869
P+1. This is what it means. One more thing,
if malloc is not able to find

00:16:04.869 --> 00:16:08.720
any free block of memory, is not able to allocate
some memory on the

00:16:08.720 --> 00:16:13.970
heap, it returns null. So, for error handling,
we need to know this and we

00:16:13.970 --> 00:16:19.079
need to write our code appropriately. Malloc
and Free. The use of malloc

00:16:19.079 --> 00:16:24.279
and free is C style code. If we want to write
the same code, same logic

00:16:24.279 --> 00:16:28.739
in C++, there is not much difference. Instead
of using these two

00:16:28.739 --> 00:16:33.639
functions, malloc and free, we will use two
operators: New and

00:16:33.639 --> 00:16:36.910
Delete. And, we will write our code something
like this. So, instead of

00:16:36.910 --> 00:16:41.050
malloc, we are using the New operator here
and instead of using free,

00:16:41.050 --> 00:16:46.689
we are using delete here. If we want to allocate
an array, we use

00:16:46.689 --> 00:16:51.160
something like this where we put the size
in brackets here. And, if we

00:16:51.160 --> 00:16:54.399
want to free an array, we use this particular
operator delete and two

00:16:54.399 --> 00:17:00.129
brackets, sorry, one bracket. With C++, we
do not have to do all these

00:17:00.129 --> 00:17:03.550
type castings, like malloc returns void and
we need to typecast it back to

00:17:03.550 --> 00:17:07.829
integer pointer. New and Delete operators
are type safe. What it means

00:17:07.829 --> 00:17:12.720
is, that they are used with a type and return
pointers to a particular type

00:17:12.720 --> 00:17:17.079
only. So, here p will get a pointer to integer
only. We will be talking

00:17:17.079 --> 00:17:21.289
about dynamic memory allocation and other
library function in more

00:17:21.289 --> 00:17:23.730
detail in the coming lessons. So, Thanks for
watching!

